{"version":3,"sources":["panels/StartWindow/contacts.svg","panels/ListQuestions/IteamListQuestion/BottomSheet/rectangle.svg","panels/ListQuestions/IteamListQuestion/BottomSheet/candelabrum.svg","img/ageRussianEmpire/The era of palace coups/The era of palace coups.png","img/ageRussianEmpire/main.png","panels/StartWindow/StartWindow.js","help.js","components/ListCard/ListCard.js","components/Header/Header.js","panels/ListAge/ListAge.js","components/AnswerOption/AnswerOption.js","components/BlackBackground/BlackBackground.js","panels/ListQuestions/IteamListQuestion/IteamListQuestion.js","components/ModalPageHead/ModalPageHead.js","panels/ListQuestions/ListQuestions.js","anime/animate.js","anime/easeOut.js","panels/Result/ResultButtons/ResultButtons.js","panels/Result/Result.js","panels/ListQuizes/ListQuizes.js","panels/AnswersQuestions/ItemAnswerQuestion/Arrow.js","panels/AnswersQuestions/ItemAnswerQuestion/ItemAnswerQuestion.js","panels/AnswersQuestions/AnswersQuestions.js","App.js","store/ageRussianEmpire/quizPetr1.js","store/ageRussianEmpire/quizTheEraOfPalaceCoups.js","store/ageRussianEmpire/ageRussianEmpire.js","store/store.js","store/results/results.js","index.js","img/ageRussianEmpire/quizPetr1/Картинка.png","img/ageRussianEmpire/quizPetr1/petr.png"],"names":["module","exports","StartWindow","id","onClick","separator","className","width","height","src","svgContacts","alt","isTitleCentre","element","curWidth","document","getElementById","scrollWidth","stub","style","text","getColNumber","ListCard","info","cardClick","index","size","map","record","i","header","title","percentProgress","numberOfQuestions","mode","image","imageSrc","caption","description","Header","left","leftBtnFunc","isClose","icon","click","justifyContent","cursor","undefined","visor","transparent","fixed","ListAge","eras","createOnClickItemAge","AnswerOption","isActived","BlackBackground","children","IteamListQuestion","platform","question","numberCurrentQuestion","countQuestions","indexAnswer","stateAnswers","goToPrevQuestion","lastIndexQuestion","currentIndexQuestion","goToLastQuestion","goToQuestionWithoutAnswer","goToNextQuestion","onFinish","changeModal","useState","isContextOpen","isImgInfoOpen","setisImgInfoOpen","transform","opened","before","data-mode","CSSTransition","in","timeout","classNames","onEnter","onExited","weight","questionText","answerOptions","answer","marginTop","ModalPageHead","onClose","textAlign","isDesktop","useAdaptivity","viewWidth","ViewWidth","SMALL_TABLET","right","ListQuestions","arrQuestions","onBack","totalScore","createIdActivePanel","test","setHistory","getInitStateAnswers","substring","setStateAnswers","calculateScore","reduce","sum","dataAnswer","indexQuestion","score","setIndexQuestion","setIndexQuestionAndHistory","newIndex","changeHistory","resetData","createGoToNextQuestion","maxLength","giveAnswer","createGoToPrevQuestion","setLastIndexQuestion","isModalOpen","setModalOpen","nextIndex","his","push","vkBridge","send","console","log","modal","activeModal","settlingHeight","arr","key","toIndexQuestion","activePanel","length","animate","timing","draw","duration","start","performance","now","requestAnimationFrame","time","timeFraction","progress","easeOut","ResultButtons","onAgain","onGoToAnswersQuestion","Result","initialTransitionYearX","year","percent","historicalEvent","isFirstOpenResult","quizes","setIsFirstOpenResult","createOnClickItemQuizes","WIDTH_YEAR","WIDTH_POSTFIX","String","WIDTH_PRETFIX","stringPrefix","replace","widthContent","documentElement","clientWidth","PADDING_LEFT_AND_RIGHT","shiftX","WIDTH_PERCENT","f","initialStyles","overflowResult","opacityPercent","opacityPrefixYear","transitionYearY","clientHeight","HEIGHT_YEAR","transitionYearX","opacityHistoricalEvent","transitionContentY","opacityContent","finishStyles","styles","setStyles","stylePercent","opacity","stylePrefixYear","styleYear","styleHistoricalEvent","styleContent","styleResult","overflow","useEffect","setTimeout","newStyles","getProgressStyle","min","max","progressStyles","newTransition","getClassNameForPercent","ListQuizes","colorsArrow","directionArrow","Arrow","direction","typeColor","styleSVG","transition","viewBox","fill","xmlns","cx","cy","r","fillRule","clipRule","d","getColor","ItemAnswerQuestion","indexRightAnswer","indexUserAnswer","isGrey","setIsAllGrey","isFirstRender","setIsFirstRender","isOpen","setIsOpen","isDisabledClick","setIsDisabledClick","setQuestionText","Math","floor","getAnswerText","heightWrapContent","setHeightWrapContent","refWrapContent","createRef","current","offsetHeight","styleWrapAnswers","position","visibility","padding","boxSizing","getStyleWrapAnswers","styleItemAnswerQuestion","zIndex","handlerClickWithouItemAnswerQuestion","e","target","closest","window","addEventListener","removeEventListener","ref","AnswersQuestions","questions","indexesAnswers","isAllGrey","q","findIndex","a","App","results","MAX_SCORE","savePercentQuiz","indexAge","indexQuiz","bridge","then","data","Platform","IOS","ANDROID","catch","error","setCurWidth","activeView","setActiveView","setActivePanel","history","goToViewListAndQuizes","goToViewListQuestions","goToViewResult","goToPanelListQuizes","setIndexAge","setIndexQuiz","indexResuslt","setIndexResult","setIndexesAnswers","goBack","pop","goForward","view","usePlatform","isWebView","onSwipeBack","quizzes","round","res","filter","quiz","quizPetr1","imagePetr1","imgExample","overSideImg","quizTheEraOfPalaceCoups","imageTheEraOfPalaceCoups","ageRussianEmpire","shortTitle","mainImage","store","ReactDOM","render","era","numberOfPassedQuizes","calculatePercentAge","default"],"mappings":"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","file":"static/js/main.b2ce7ddd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/contacts.55b38efc.svg\";","module.exports = __webpack_public_path__ + \"static/media/rectangle.b14c837f.svg\";","module.exports = __webpack_public_path__ + \"static/media/candelabrum.7e90073e.svg\";","module.exports = __webpack_public_path__ + \"static/media/The era of palace coups.42e7310b.png\";","module.exports = __webpack_public_path__ + \"static/media/main.96699d6f.png\";","import { Card, CardScroll, Panel, PanelHeader, View, CardGrid, ContentCard, Button} from '@vkontakte/vkui';\nimport React from 'react';\nimport test from '../../img/ageRussianEmpire/quizPetr1/petr.png'\n\nimport svgContacts from './contacts.svg';\n\nimport './StartWindow.css';\n\n\nconst StartWindow = ({id, onClick}) => {\n    const ID_ACTIVE_PANEL = \"ID_ACTIVE_PANEL\";\n\n    return (\n        <Panel id={id} separator={false}>\n            <div className=\"StartWindow\">\n                <div className=\"StartWindow__container\">\n                    <img width=\"50\" height=\"50\" src={svgContacts} alt=\"contacts\"/>\n                    <h1 className=\"StartWindow__title\">Привет, друг!1</h1>\n                    <p className=\"StartWindow__text\">\n                        Это приложение поможет тебе проверить свои знания в области истори родной страны. Удачи!\n                    </p>\n                    <button className=\"StartWindow__button\" onClick={onClick}>Поехали!</button>\n                </div>\n            </div>\n        </Panel>\n    );\n}\n\nexport default StartWindow;","import React from 'react';\nexport function isTitleCentre ( element) {\n    let curWidth = document.getElementById('root').scrollWidth;\n    return({\n    stub:curWidth >= 370 ? <div style={{width:\"90px\"}}>{element} </div> :element,\n    text:curWidth >= 370 ? \"center\" : \"start\"\n    })\n}\n\nexport function getColNumber(curWidth) {\n    if(curWidth>1280){\n        return \"s\"\n    }\n    else if (curWidth>560){\n        return \"m\"\n    }\n    else {\n        return \"l\"\n    } \n}\n","import { CardGrid, ContentCard, Div } from '@vkontakte/vkui';\nimport React from 'react';\nimport './ListCard.css'\nimport { getColNumber } from '../../help';\n\nconst ListCard = ( { info, curWidth, cardClick = (index) => null } ) => {\n    return (\n        <Div>\n            <div className=\"ListCard\">\n                <CardGrid size={getColNumber(curWidth)}>\n                {\n                    info.map((record,i) => (\n                        <ContentCard\n                            header={\n                                <div className=\"ListCard__title\">\n                                    <div>{record.title}</div>\n                                    <div>{record.percentProgress}/{record.numberOfQuestions}</div>\n                                </div>\n                            }\n                            mode={\"tint\"}\n                            onClick={cardClick(i)}\n                            image={record.imageSrc}\n                            caption={record.description}\n                            className=\"ListCard__Card\"\n                        />\n                    ))\n                }\n                </CardGrid>\n            </div>\n        </Div>\n    )\n}\n\nexport default ListCard","import { PanelHeader, PanelHeaderBack, PanelHeaderClose, PanelHeaderContent  } from '@vkontakte/vkui';\nimport React from 'react';\nimport { isTitleCentre } from '../../help';\nimport './Header.css'\n\nconst Header = ({curWidth, leftBtnFunc, isClose, text, icon, click}) => {\n    \n    let left \n    let justifyContent = isTitleCentre(curWidth).text;\n    let cursor = \"inherit\";\n\n    if (isClose) {\n        left = isTitleCentre(curWidth,<PanelHeaderClose  onClick={leftBtnFunc} className=\"Header__button-back\" ></PanelHeaderClose>).stub \n    }\n    else if (leftBtnFunc !== undefined ){\n        left = isTitleCentre(curWidth,<PanelHeaderBack onClick={leftBtnFunc} className=\"Header__button-back\" ></PanelHeaderBack>).stub\n    }\n    else{\n        left = isTitleCentre(curWidth).stub\n    }\n\n    if(click !== undefined){\n        cursor=\"pointer\"\n    }\n\n    return(\n        <PanelHeader                     \n            separator={false}\n            visor={true}\n            transparent={true}\n            fixed={false}\n            left={ left }\n            >\n\n            <div className=\"Header__inside\" style={{justifyContent, cursor:cursor}} onClick={click}>\n                {text}\n                {icon}\n            </div>\n\n        </PanelHeader>\n    )\n}\n\nexport default Header","import { PanelHeader, Panel, Div } from '@vkontakte/vkui';\nimport React from 'react';\nimport './ListAge.css'\nimport { isTitleCentre } from '../../help';\nimport ListCard from '../../components/ListCard/ListCard'\nimport Header from '../../components/Header/Header'\n\n\nconst ListAge = ({id, eras,curWidth, createOnClickItemAge=index=>null}) => {\n\n    const ID_ACTIVE_PANEL = \"ID_ACTIVE_PANEL\";\n\n\n    return (\n        <Panel id={ID_ACTIVE_PANEL}>\n            \n            <div className=\"ListAge\">\n\n                <Header\n                    text=\"Выбирете эпоху\"\n                ></Header> \n                <ListCard\n                    info={eras}\n                    curWidth={curWidth}\n                    cardClick={createOnClickItemAge}>\n                </ListCard>\n            </div>\n\n        </Panel>\n    )\n}\n\nexport default ListAge;\n","import React from 'react';\r\nimport { Button } from \"@vkontakte/vkui\"\r\nimport './AnswerOption.css'\r\n\r\nconst AnswerOption = ({isActived, text, click, style}) => {\r\n    return(\r\n        <Button onClick={click} mode=\"secondary\" style = {style} className={`AnswerOption ${isActived && \"AnswerOption_active\"}`}>{text}</Button>\r\n    )\r\n}\r\n\r\nexport default AnswerOption","import React from 'react';\n\nimport './BlackBackground.css';\n\nconst BlackBackground = ({children}) => {\n    return <div className=\"BlackBackground\">{children}</div>\n}\n\nexport default BlackBackground;\n","import { Icon24Back, Icon28ChevronBack, Icon28UsersOutline, Icon28ChevronDownOutline } from '@vkontakte/icons';\nimport { ModalRoot, Panel, PanelHeaderContext, PanelHeaderContent, platform, Text, Div, CardGrid, Cell, List, ModalPage } from '@vkontakte/vkui';\nimport React, { useEffect, useState } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport AnswerOption from '../../../components/AnswerOption/AnswerOption';\nimport Header from '../../../components/Header/Header';\nimport ListCard from '../../../components/ListCard/ListCard';\nimport BottomSheet from './BottomSheet/BottomSheet';\n\nimport \"./IteamListQuestion.css\";\n\nconst osName = platform();\n\nconst IteamListQuestion = ({ id, curWidth, question,\n    numberCurrentQuestion, countQuestions,\n    stateAnswers, indexAnswer,\n    lastIndexQuestion, currentIndexQuestion,\n    goToLastQuestion, goToQuestionWithoutAnswer,\n    goToPrevQuestion, goToNextQuestion,\n    onFinish = () => { }, changeModal = () => {} }) => {\n\n    const [isRotated, setRotate] = useState(false);\n\n    const [isContextOpen, setOpenContext] = useState(false)\n\n    const rotateImage = () => setRotate(!isRotated);\n\n    const [isOpenList, setOpenList] = useState(false);\n    const openModal = () => setOpenList(!isOpenList);\n    // caption={<div style={{width:\"100%\",height:\"100%\",backgroundColor:\"black\"}}></div>}\n\n    const [isImgInfoOpen, setisImgInfoOpen] = useState(false)\n\n    return (\n        <Panel id={id} separator={false}>\n            <div className=\"IteamListQuestion\">\n\n                <Header\n                    isClose={numberCurrentQuestion === 1 ? true : false}\n                    leftBtnFunc={numberCurrentQuestion !== 1 ? goToPrevQuestion : undefined}\n                    text={numberCurrentQuestion + \" из \" + countQuestions} \n                    icon={<Icon28ChevronDownOutline style={{ transform: `rotate(${isContextOpen ? '180deg' : '0'})` }} />}\n                    click={changeModal}\n                    // leftBtnFunc={}\n                >              \n                {/* <div>\n                    \n                </div> */}\n                    {/* <PanelHeaderContent\n                        aside={<Icon16Dropdown style={{ transform: `rotate(${isContextOpen ? '180deg' : '0'})` }} />}\n                        onClick={ () => {setOpenContext(!isContextOpen)}}\n                        style={{textAlign:\"center\"}}\n                    >\n                        \n                    </PanelHeaderContent> */}\n                    \n                </Header>\n\n            <PanelHeaderContext opened={isContextOpen}>\n                <List>\n                  <Cell\n                    before={<Icon28UsersOutline />}\n                    // after={this.state.mode === 'all' ? <Icon24Done fill=\"var(--accent)\" /> : null}\n                    // onClick={this.select}\n                    data-mode=\"all\"\n                  >\n                    Communities\n                  </Cell>\n                  <Cell\n                    before={<Icon28UsersOutline />}\n                    // after={this.state.mode === 'managed' ? <Icon24Done fill=\"var(--accent)\" /> : null}\n                    // onClick={this.select}\n                    data-mode=\"managed\"\n                  >\n                    Managed Communities\n                  </Cell>\n                </List>\n              </PanelHeaderContext>\n                \n                <Div className=\"IteamListQuestion__content\">\n\n                    <div className=\"IteamListQuestion__image-container\" onClick={() => {setisImgInfoOpen(!isImgInfoOpen)}}>\n\n                        <img\n                            className=\"IteamListQuestion__image\" \n                            src={question.imageSrc}\n                        />\n                        \n                        <CSSTransition \n                            in={isImgInfoOpen} \n                            timeout={200} \n                            classNames=\"IteamListQuestion__image-info\"\n                            onEnter={() => {setisImgInfoOpen(true)}}\n                            onExited={() => {setisImgInfoOpen(false)}}>\n                            <div className=\"IteamListQuestion__image-info\"/>\n                        </CSSTransition>\n\n                    </div>\n\n                    <Text weight=\"regular\" className=\"IteamListQuestion__question\">{question.questionText}</Text> \n\n                    <div className=\"IteamListQuestion__answer-options\">\n                        {\n                            question.answerOptions.map((answer, i) => (\n                                <AnswerOption\n                                    click={() => goToNextQuestion(i)}\n                                    isActived={indexAnswer === i}\n                                    text={answer.text}\n                                    style={{marginTop:\"10px\"}}\n                                >\n                                </AnswerOption>\n                            ))\n                        }\n                    </div>\n\n                        {/* <div\n                            className={`IteamListQuestion__image-wrap ${isRotated && \"IteamListQuestion__image-wrap_rotated\"}`}\n                        >\n                            <img\n                                className=\"IteamListQuestion__image IteamListQuestion__image_hidden\"\n                                src={question.questionImg}\n                                alt={`image_hidden_${id}`}\n                            />\n\n                            <div className=\"IteamListQuestion__image-side-wrap IteamListQuestion__image-side-wrap_front\">\n                                <img className=\"IteamListQuestion__image\" src={question.questionImg} alt={`image_front_${id}`} />\n\n                                <button\n                                    onClick={rotateImage}\n                                    className=\"IteamListQuestion__rotate-button IteamListQuestion__rotate-button_front\"\n                                ></button>\n                            </div>\n\n                            <div className={`IteamListQuestion__image-side-wrap \n                                IteamListQuestion__image-side-wrap_back \n                                ${!isRotated ? \"IteamListQuestion__image-side-wrap_disable\" : \"\"}`}\n                            >\n                                <img className=\"IteamListQuestion__image\" src={question.overSideImg} alt={`image_back_${id}`} />\n\n                                <button\n                                    onClick={rotateImage}\n                                    className=\"IteamListQuestion__rotate-button IteamListQuestion__rotate-button_back\"\n                                ></button>\n                            </div>\n                        </div> */}\n                    \n\n                    {/* <p className=\"IteamListQuestion__question-text\">{question.questionText}</p>\n\n                    <div className=\"IteamListQuestion__answer-options\">\n                        {\n                            question.answerOptions.map((answer, i) => (\n                                <button\n                                    key={i}\n                                    className={\n                                        `IteamListQuestion__answer \n                                        ${indexAnswer === i && \"IteamListQuestion__answer_marked\"}`\n                                    }\n                                    onClick={() => goToNextQuestion(i)}\n                                >\n                                    {answer.text}\n                                </button>\n                            ))\n                        }\n                    </div> */}\n                </Div>\n\n                {/* {\n                    lastIndexQuestion !== -1 &&\n                    <div\n                        onClick={goToLastQuestion}\n                        className={\n                            `IteamListQuestion__go-to-last-question \n                                ${lastIndexQuestion > currentIndexQuestion\n                                ? \"IteamListQuestion__go-to-last-question_right\"\n                                : \"IteamListQuestion__go-to-last-question_left\"\n                            }`\n                        }\n                    >\n                        к вопросу {lastIndexQuestion + 1}\n                    </div>\n                } */}\n            </div>\n        </Panel>\n    )\n};\n\nexport default IteamListQuestion;\n","import React from \"react\";\r\nimport { ANDROID, IOS, ModalPageHeader, useAdaptivity, usePlatform, PanelHeaderButton, PanelHeaderClose, ViewWidth } from \"@vkontakte/vkui\";\r\nimport './ModalPageHead.css'\r\nimport { isTitleCentre } from \"../../help\";\r\n\r\n\r\nconst ModalPageHead = ({text, curWidth, onClose = () => {}}) => {\r\n\r\n    let textAlign = isTitleCentre(curWidth).text;\r\n    const { viewWidth } = useAdaptivity();\r\n    const isDesktop = !(viewWidth >= ViewWidth.SMALL_TABLET);    \r\n    return(\r\n        <ModalPageHeader\r\n            // separator={false}\r\n            // visor={true}\r\n            // transparent={true}\r\n            left={isDesktop && <PanelHeaderClose className=\"ModalPageHead__button-close\" onClick={onClose}/>}\r\n            right={isDesktop && <PanelHeaderClose className=\"ModalPageHead__button-pug\"/>}\r\n        >\r\n         <div className=\"ModalPageHead__inside\" style={{textAlign}}>\r\n            {text}\r\n        </div>\r\n        </ModalPageHeader>\r\n    )\r\n}\r\n\r\nexport default ModalPageHead","import { View,ModalRoot,ModalPage,List, SimpleCell, Div, useAdaptivity, usePlatform, ViewWidth, Group } from '@vkontakte/vkui';\nimport React, { useState } from 'react';\nimport IteamListQuestion from './IteamListQuestion/IteamListQuestion';\nimport ModalPageHead from '../../components/ModalPageHead/ModalPageHead';\nimport vkBridge from '@vkontakte/vk-bridge'\nimport './ListQuestions.css'\n\nconst MODAL_ID = \"MODAL_ID\"\nconst PANEL_FIRST_ID=\"IteamListQuestion-0\"\n\n\n\nconst ListQuestions = ({id, curWidth, arrQuestions, onBack=()=>{}, onFinish=totalScore=>{}, test=() => {}}) => {\n    const createIdActivePanel = index => `IteamListQuestion-${index}`;\n    const [history, setHistory] = useState([PANEL_FIRST_ID]);\n\n\n    // логика хранения ответов\n    const getInitStateAnswers = () => [\n        ...arrQuestions.map(question => ({\n            questionText: question.questionText.substring(0, 15),\n            indexAnswer: -1\n        }))\n    ];\n\n    const [stateAnswers, setStateAnswers] = useState(getInitStateAnswers());\n\n    const giveAnswer = (indexQuestion, indexAnswer) => {\n        stateAnswers[indexQuestion].indexAnswer = indexAnswer;\n        setStateAnswers([...stateAnswers]);\n    }\n\n    const calculateScore = () => { \n        return stateAnswers.reduce((sum, dataAnswer, indexQuestion) => {\n            if (dataAnswer.indexAnswer === -1) {\n                return sum;\n            }\n\n            return sum + arrQuestions[indexQuestion].answerOptions[dataAnswer.indexAnswer].score;\n        }, 0);\n    }\n\n    const resetStateAnswers = () => setStateAnswers(getInitStateAnswers());\n\n    // логика переключения вопросов\n    const [indexQuestion, setIndexQuestion] = useState(0);\n    const setIndexQuestionAndHistory = (newIndex) => {\n        setIndexQuestion(newIndex)\n        changeHistory(newIndex)\n    }\n\n    const resetData = () => {\n        resetStateAnswers();\n        setIndexQuestionAndHistory(0);\n    }\n\n    const createGoToNextQuestion = (indexQuestion, maxLength) => (indexAnswer) => {\n        giveAnswer(indexQuestion, indexAnswer);\n\n        if (indexQuestion < maxLength - 1) {\n            setIndexQuestionAndHistory(indexQuestion + 1);\n        } else {\n            onFinish(calculateScore(), stateAnswers.map(answer => answer.indexAnswer));\n            resetData();\n        }\n    }\n\n    const createGoToPrevQuestion = (indexQuestion) => () => {\n        if (indexQuestion > 0) {\n            setIndexQuestionAndHistory(indexQuestion - 1);\n        } else {\n            onBack();\n            resetData();\n        }\n    }\n\n    // логика перехода к любому вопросу\n    const [lastIndexQuestion, setLastIndexQuestion] = useState(-1);\n\n    const createGoToQuestionWithoutAnswer = (toIndexQuestion) => {\n        // console.log(indexQuestion)\n        // console.log(toIndexQuestion)\n        if (indexQuestion != toIndexQuestion)\n        {\n            // setLastIndexQuestion(fromIndexQuestion);\n            setIndexQuestionAndHistory(toIndexQuestion);\n        }   \n    }\n\n    const goToLastQuestion = () => {\n        setIndexQuestionAndHistory(lastIndexQuestion);\n        setLastIndexQuestion(-1);\n    }\n\n    // Работа с модальным окном\n    const [isModalOpen, setModalOpen] = useState(null)\n    const changeModal = () => {\n        if(isModalOpen === MODAL_ID){\n            setModalOpen(null)\n        }\n        else{\n            setModalOpen(MODAL_ID)\n        }\n    }\n\n    // История\n    const changeHistory = (nextIndex) => { \n        setHistory()\n\t\tlet his = [];\n        for(let i=0;i<nextIndex+1;i++){\n            his.push(createIdActivePanel(i))\n        }\n        setHistory(his)\n\n\t\tif (createIdActivePanel(nextIndex) === PANEL_FIRST_ID) {\n\t\t\tvkBridge.send('VKWebAppDisableSwipeBack');\n\t\t  }\n        else{\n            vkBridge.send('VKWebAppEnableSwipeBack');\n        }\n        console.log(his)\n\t}\n\n\n    // const goBack = () => {\n\t// \tlet his = history;\n\t// \this.pop()\n\t// \tif (activePanel === PANEL_FIRST_ID) {\n\t// \t\tvkBridge.send('VKWebAppEnableSwipeBack');\n\t// \t  }\n\t// \tsetHistory(his)\n\t// \tsetActivePanel(history[history.length - 1])\n\t// \tconsole.log(history)\n\t// }\n\n    const modal = (\n        <ModalRoot activeModal={isModalOpen} onClose={changeModal}>\n            <ModalPage \n                id={MODAL_ID}\n                settlingHeight={100}\n                header={\n                    <ModalPageHead text=\"Вопросы\" curWidth={curWidth}></ModalPageHead>\n                }>\n                {/* <Div>\n                <SimpleCell \n                    onClick={() => {createGoToQuestionWithoutAnswer(1); changeModal()}}\n                    className={`ListQuestions__modal-el`}>\n                    <div className=\"ListQuestions__modal-el__text\">\n                        {\"questionText\"}\n                    </div>\n                </SimpleCell>\n                <SimpleCell \n                    onClick={() => {createGoToQuestionWithoutAnswer(1); changeModal()}}\n                    className={`ListQuestions__modal-el`}>\n                    <div className=\"ListQuestions__modal-el__text\">\n                        {\"questionText\"}\n                    </div>\n                </SimpleCell>\n                <SimpleCell \n                    onClick={() => {createGoToQuestionWithoutAnswer(); changeModal()}}\n                    className={`ListQuestions__modal-el`}>\n                    <div className=\"ListQuestions__modal-el__text\">\n                        {\"questionText\"}\n                    </div>\n                </SimpleCell>\n                </Div> */}\n                {\n                    arrQuestions.map(({questionText, indexAnswer}, i, arr) => (\n                        <SimpleCell \n                            key={i}\n                            onClick={() => {createGoToQuestionWithoutAnswer(i); changeModal()}}\n                            className={`ListQuestions__modal-el`}>\n                            <div className=\"ListQuestions__modal-el__text\">\n                                {questionText}\n                            </div>\n                        </SimpleCell>\n                    ))\n                }\n            </ModalPage>\n\n        </ModalRoot>\n    )\n\n    return (\n        <View id={id} activePanel={createIdActivePanel(indexQuestion)} modal={modal}>\n            {\n                arrQuestions.map((question, i, arr) =>(\n                    <IteamListQuestion\n                        key={i}\n                        id={createIdActivePanel(i)}\n                        curWidth={curWidth}\n\n                        question={question}\n                        numberCurrentQuestion={i+1}\n                        countQuestions={arr.length}\n\n                        stateAnswers={stateAnswers}\n                        indexAnswer={stateAnswers[i].indexAnswer}\n\n                        lastIndexQuestion={lastIndexQuestion}\n                        currentIndexQuestion={i}\n                        goToLastQuestion={goToLastQuestion}\n                        // goToQuestionWithoutAnswer={createGoToQuestionWithoutAnswer(i)}\n\n                        goToNextQuestion={createGoToNextQuestion(i, arr.length)}\n                        goToPrevQuestion={createGoToPrevQuestion(i)}\n\n                        onFinish={() => onFinish(calculateScore())}\n                        \n                        changeModal={changeModal}\n                        changeHistory={changeHistory}\n                    />\n                ))\n            }\n        </View>\n    )\n}\n\nexport default ListQuestions;\n","function animate({timing, draw, duration}) {\n\n    let start = performance.now();\n  \n    requestAnimationFrame(function animate(time) {\n      // timeFraction изменяется от 0 до 1\n      let timeFraction = (time - start) / duration;\n      if (timeFraction > 1) timeFraction = 1;\n  \n      // вычисление текущего состояния анимации\n      let progress = timing(timeFraction);\n  \n      draw(progress); // отрисовать её\n  \n      if (timeFraction < 1) {\n        requestAnimationFrame(animate);\n      }\n  \n    });\n}\n\nexport default animate;\n","function makeEaseOut(timing) {\n  return function (timeFraction) {\n    return 1 - timing(1 - timeFraction);\n  }\n}\n\nconst easeOut = makeEaseOut((timeFraction) => timeFraction);\n\nexport default easeOut;\n","import React from \"react\";\n\nimport bridge from '@vkontakte/vk-bridge';\n\nimport '../Result.css';\n\nconst ResultButtons = ({onAgain=()=>{}, onGoToAnswersQuestion=()=>{}}) => {\n    const sendToHistory = (image) => {\n        console.log(image);\n\n        bridge.send(\"VKWebAppShowStoryBox\", {\n            \"background_type\": \"image\",\n            \"url\": \"https://nikita-jpg.github.io\" + image\n        });\n    }\n\n    const sendToWall = (image) => {\n        window.open(\"https://vk.com/share.php?url=https://nikita-jpg.github.io\" + image);\n    }\n\n    return (\n        <div className=\"Result__buttons-container\">\n            <button className=\"Result__button Result__button_favorite\">Поддержать</button>\n            <button \n                onClick={onAgain} \n                className=\"Result__button Result__button_refresh\">\n                Ещё раз\n            </button>\n            <button className=\"Result__button Result__button_share\">Поделиться</button>\n            <button \n                onClick={onGoToAnswersQuestion} \n                className=\"Result__button Result__button_format-list-bulleted\">\n                К вопросам\n            </button>\n        </div>\n    )\n}\n\nexport default ResultButtons;\n","import { Icon24Back } from \"@vkontakte/icons\";\nimport { Panel, PanelHeader, PanelHeaderButton, View } from \"@vkontakte/vkui\";\nimport React, { useEffect, useState } from \"react\";\nimport Header from \"../../components/Header/Header\";\n\nimport \"./Result.css\";\nimport animate from \"../../anime/animate\";\nimport easeOut from \"../../anime/easeOut\";\n// import ListQuizes from \"../../components/ListQuizes/ListQuizes\";\nimport ResultButtons from \"./ResultButtons/ResultButtons\";\n\nconst Result = ({ id, year, percent, historicalEvent, quizes, isFirstOpenResult, setIsFirstOpenResult,\n    onBack = () => { }, createOnClickItemQuizes = (index) => null,\n    onAgain=()=>{}, onGoToAnswersQuestion=()=>{} }) => {\n\n\tconst modifyIsFirstOpenResult = (f) => (...args) => {\n\t\tsetIsFirstOpenResult(true);\n\t\treturn f(...args);\n\t}\n\n    const getClassNameForPercent = (percent) => {\n        if (percent <= 39) {\n            return \"Result__year-postfix_bad\";\n        }\n\n        if (percent <= 69) {\n            return \"Result__year-postfix_normal\";\n        }\n\n        return \"Result__year-postfix_good\";\n    }\n\n    const HEIGHT_HEADER = 60;\n    const HEIGHT_YEAR = 76;\n    const WIDTH_CHAR_IN_YEAR = 58;\n    const WIDTH_PERCENT = 78;\n    const WIDTH_YEAR = WIDTH_CHAR_IN_YEAR * year.length;\n    const WIDTH_POSTFIX = WIDTH_CHAR_IN_YEAR * String(percent).length;\n    const WIDTH_PRETFIX = WIDTH_YEAR - WIDTH_POSTFIX;\n    const PADDING_LEFT_AND_RIGHT = 10;\n\n    const stringPrefix = String(year).replace(String(percent), \"\");\n    const widthContent = document.documentElement.clientWidth - PADDING_LEFT_AND_RIGHT * 2;\n\n    const shiftX = WIDTH_YEAR + WIDTH_PERCENT > widthContent\n        ?(widthContent - WIDTH_YEAR) / 2\n        :WIDTH_PERCENT / 2;\n\n    let initialTransitionYearX;\n\n    if (WIDTH_YEAR + WIDTH_PERCENT > widthContent) {\n        initialTransitionYearX = (widthContent - WIDTH_POSTFIX - WIDTH_PERCENT) / 2 + (WIDTH_YEAR + WIDTH_PERCENT - widthContent);\n    } else {\n        initialTransitionYearX = WIDTH_PRETFIX / 2;\n    }\n\n    const initialStyles = {\n        overflowResult: \"hidden\",\n        opacityPercent: 1,\n        opacityPrefixYear: 0,\n        transitionYearY: document.documentElement.clientHeight / 2 - HEIGHT_YEAR / 2 - HEIGHT_HEADER,\n        transitionYearX: -initialTransitionYearX,\n        opacityHistoricalEvent: 0,\n        transitionContentY: document.documentElement.clientHeight / 2 + HEIGHT_YEAR / 2,\n        opacityContent: 0\n    };\n\n    const finishStyles = {\n        overflowResult: \"\",\n        opacityPercent: 0,\n        opacityPrefixYear: 1,\n        transitionYearY: 0,\n        transitionYearX: shiftX,\n        opacityHistoricalEvent: 1,\n        transitionContentY: 0,\n        opacityContent: 1\n    }\n\n    const [styles, setStyles] = useState(isFirstOpenResult ?initialStyles :finishStyles);\n\n    const stylePercent = {\n        opacity: styles.opacityPercent\n    }\n\n    const stylePrefixYear = {\n        opacity: styles.opacityPrefixYear\n    }\n\n    const styleYear = {\n        transform: `translate(${styles.transitionYearX}px, ${styles.transitionYearY}px)`\n    }\n\n    const styleHistoricalEvent = {\n        opacity: styles.opacityHistoricalEvent,\n        transform: `translateY(${styles.transitionYearY}px)`\n    }\n\n    const styleContent = {\n        opacity: styles.opacityContent,\n        transform: `translateY(${styles.transitionContentY}px)`\n    }\n\n    const styleResult = {\n        overflow: styles.overflowResult\n    }\n\n    useEffect(() => {\n        if (isFirstOpenResult) {\n            setIsFirstOpenResult(false);\n        } else {\n            return;\n        }\n\n        setTimeout(() => animate({\n            timing: easeOut,\n\n            duration: 3000,\n\n            draw(progress) {\n                const newStyles = { ...styles };\n\n                const getProgressStyle = (min, max) => (progress - min) / (max - min);\n\n                if (progress < 0.33) {\n                    const progressStyles = getProgressStyle(0, 0.33);\n\n                    let newTransition = (initialStyles.transitionYearX - shiftX) * (1 - progressStyles) + shiftX;\n\n                    newStyles.opacityPercent = 1 - progressStyles;\n                    newStyles.opacityPrefixYear = progressStyles;\n                    newStyles.transitionYearX = newTransition;\n                } else {\n                    newStyles.opacityPrefixYear = finishStyles.opacityPrefixYear;\n                    newStyles.transitionYearX = finishStyles.transitionYearX;\n                    newStyles.opacityPercent = finishStyles.opacityPercent;\n                }\n\n                if (progress >= 0.33 && progress < 0.66) {\n                    const progressStyles = getProgressStyle(0.33, 0.66);\n\n                    newStyles.opacityHistoricalEvent = progressStyles;\n                } else if (progress >= 0.66) {\n                    newStyles.opacityHistoricalEvent = finishStyles.opacityHistoricalEvent;\n                }\n\n                if (progress >= 0.66 && progress < 1) {\n                    const progressStyles = getProgressStyle(0.66, 1);\n\n                    newStyles.transitionContentY = initialStyles.transitionContentY * (1 - progressStyles);\n                    newStyles.transitionYearY = initialStyles.transitionYearY * (1 - progressStyles);\n                    newStyles.opacityContent = progressStyles;\n                } else if (progress >= 1) {\n                    newStyles.transitionContentY = finishStyles.transitionContentY;\n                    newStyles.transitionYearY = finishStyles.transitionYearY;\n                    newStyles.opacityContent = finishStyles.opacityContent;\n                    newStyles.overflowResult = finishStyles.overflowResult;\n                }\n\n                setStyles(newStyles);\n            }\n        }), 1000);\n    }, []);\n\n    return (\n        <View id={id} activePanel=\"PANEL_RESULT\">\n            <Panel id=\"PANEL_RESULT\">\n                <Header></Header>\n                {/* <PanelHeader\n                    className=\"Result__PanelHeader\"\n                    left={\n                        <>\n                            <PanelHeaderButton onClick={modifyIsFirstOpenResult(onBack)}>\n                                <Icon24Back fill=\"white\" />\n                            </PanelHeaderButton>\n                            <h1 className=\"Result__title\">Результаты</h1>\n                        </>\n                    }\n                    separator={false}\n                    visor={false}\n                    transparent={false}\n                >\n                </PanelHeader> */}\n\n                <div className=\"Result\" style={styleResult}>\n                    <div style={styleYear} className=\"Result__year\">\n                        <span style={stylePrefixYear} className=\"Result__year-prefix\">{stringPrefix}</span>\n                        <span className={getClassNameForPercent(percent)}>\n                            {percent}\n                            <span style={stylePercent}>%</span>\n                        </span>\n                    </div>\n\n                    <div style={styleHistoricalEvent} className=\"Result__historical-event\">{historicalEvent}</div>\n\n                    <div style={styleContent} className=\"Result__content\">\n                        <ResultButtons \n                            onAgain={modifyIsFirstOpenResult(onAgain)}\n                            onGoToAnswersQuestion={onGoToAnswersQuestion}\n                        />\n\n                        {/* <ListQuizes\n                            quizes={quizes}\n                            createOnClickItemQuizes={\n                                (...args1) => (...args2) => {\n                                    createOnClickItemQuizes(...args1)(...args2);\n                                    setIsFirstOpenResult(true);\n                                }\n                            }\n                        /> */}\n                    </div>\n                </div>\n            </Panel>\n        </View>\n    )\n}\n\nexport default Result;\n","import { Panel } from '@vkontakte/vkui';\nimport React from 'react';\nimport ListCard from '../../components/ListCard/ListCard'\n\nimport './ListQuizes.css';\nimport Header from '../../components/Header/Header';\n\nconst ListQuizes = ({ id, curWidth, title, quizes, onBack = () => { }, createOnClickItemQuizes = (index) => null }) => {\n\n    return (\n        <Panel id={id}>\n            <div className=\"ListQuizes\">\n\n                <Header\n                    leftBtnFunc={onBack}\n                    text={title}\n                >\n                </Header>\n\n                <ListCard\n                    info={quizes}\n                    curWidth={curWidth}\n                    cardClick={createOnClickItemQuizes}\n                />\n\n            </div>\n        </Panel>\n    );\n}\n\nexport default ListQuizes;\n","import React from 'react';\n\nexport const colorsArrow = {\n    GREEN: \"GREEN\",\n    RED: \"RED\",\n    GREY: \"GREY\"\n}\n\nexport const directionArrow = {\n    UP: \"UP\",\n    DOWN: \"DOWN\"\n}\n\nconst Arrow = ({direction, typeColor}) => {\n    const getColor = (typeColor) => {\n        if (typeColor === colorsArrow.GREEN) {\n            return \"#79C52D\";\n        }\n\n        if (typeColor === colorsArrow.RED) {\n            return \"#E81919\";\n        }\n\n        return \"#858585\";\n    }\n\n    const styleSVG = {\n        transform: `rotate(${direction === directionArrow.UP ?\"-180deg\" :\"0deg\"})`,\n        transition: \"transform 1s\"\n    }\n\n    const stylePath = {\n        transition: \"fill 1s\"\n    }\n\n    return (\n        <svg style={styleSVG} width=\"26\" height=\"26\" viewBox=\"0 0 26 26\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"13\" cy=\"13\" r=\"13\" fill=\"#303030\" />\n            <path style={stylePath} fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M6.59278 10.8248C7.0137 10.2776 7.7985 10.1753 8.3457 10.5962L13.0002 14.1766L17.6548 10.5962C18.2019 10.1753 18.9868 10.2776 19.4077 10.8248C19.8286 11.372 19.7262 12.1568 19.179 12.5778L13.7624 16.7444C13.313 17.09 12.6874 17.09 12.2381 16.7444L6.82142 12.5778C6.27423 12.1568 6.17186 11.372 6.59278 10.8248Z\" fill={getColor(typeColor)} />\n        </svg>\n    )\n}\n\nexport default Arrow;\n","import React, { createRef, useEffect, useState } from 'react';\nimport animate from '../../../anime/animate';\nimport easeOut from '../../../anime/easeOut';\nimport BlackBackground from '../../../components/BlackBackground/BlackBackground';\nimport Arrow, { colorsArrow, directionArrow } from './Arrow';\n\nimport \"./ItemAnswerQuestion.css\";\n\nconst ItemAnswerQuestion = ({ id, question, indexRightAnswer, indexUserAnswer, isGrey, setIsAllGrey }) => {\n    const [isFirstRender, setIsFirstRender] = useState(true);\n\n    const [isOpen, setIsOpen] = useState(false);\n    const [typeColor, setTypeColor] = useState(indexRightAnswer === indexUserAnswer ?colorsArrow.GREEN :colorsArrow.RED);\n\n    const [isDisabledClick, setIsDisabledClick] = useState(false);\n\n\n    // работа с текстом вопроса\n    const MAX_LENGTH_QUESTION_TEXT = 15;\n\n    const cutQuestionText = (text, length=MAX_LENGTH_QUESTION_TEXT) => text.substring(0, length) + \"...\";\n\n    const [questionText, setQuestionText] = useState(question.questionText.substring(0, MAX_LENGTH_QUESTION_TEXT) + \"...\");\n\n    useEffect(() => {\n        if (isFirstRender) {\n            return;\n        }\n\n        setIsDisabledClick(true);\n\n        if (isOpen) {\n            animate({\n                timing: easeOut,\n                duration: 1000,\n                draw(progress) {\n                    if (progress < 1) {\n                        const length = MAX_LENGTH_QUESTION_TEXT + \n                            Math.floor((question.questionText.length - MAX_LENGTH_QUESTION_TEXT) * progress);\n                        setQuestionText(question.questionText.substring(0, length));\n                    } else {\n                        setQuestionText(question.questionText);\n                        setIsDisabledClick(false);\n                    }\n                }\n            });\n        } else {\n            animate({\n                timing: easeOut,\n                duration: 1000,\n                draw(progress) {\n                    if (progress < 1) {\n                        const length = MAX_LENGTH_QUESTION_TEXT + \n                            Math.floor((question.questionText.length - MAX_LENGTH_QUESTION_TEXT) * (1 - progress));\n                        setQuestionText(question.questionText.substring(0, length));\n                    } else {\n                        setQuestionText(question.questionText.substring(0, MAX_LENGTH_QUESTION_TEXT) + \"...\");\n                        setIsDisabledClick(false);\n                    }\n                }\n            });\n        }\n    }, [isOpen]);\n\n    const onClick = () => {\n        setIsOpen(!isOpen);\n        setIsAllGrey(!isGrey);\n    }\n\n    const getAnswerText = (index) => {\n        return `${question.answerOptions[index].text}`;\n    }\n\n\n    const [heightWrapContent, setHeightWrapContent] = useState(\"auto\");\n\n    const refWrapContent = createRef();\n\n    useEffect(() => {\n        setIsFirstRender(false);\n        setHeightWrapContent(refWrapContent.current.offsetHeight)\n    }, []);\n\n    const PADDING_ITEM_ANSWER_QUESTION = 16;\n\n    const getStyleWrapAnswers = (isFirstRender, isOpen) => {\n        if (isFirstRender) {\n            return {\n                position: \"absolute\",\n                visibility: \"hidden\",\n                width: \"100%\",\n                padding: `0 ${PADDING_ITEM_ANSWER_QUESTION}px`,\n                boxSizing: \"border-box\"\n            }\n        }\n\n        return {\n            height: isOpen ? heightWrapContent : 0\n        }\n    }\n\n    const styleWrapAnswers = getStyleWrapAnswers(isFirstRender, isOpen);\n\n    const styleItemAnswerQuestion = {\n        padding: `0 ${PADDING_ITEM_ANSWER_QUESTION}px`,\n        zIndex: isOpen ?10 :0\n    }\n\n    // логика закрытия по щелчку вне ItemAnswerQuestion\n    const handlerClickWithouItemAnswerQuestion = (e) => {\n        if (!e.target.closest(`.${id}`)) {\n            setIsOpen(false);\n        }\n    }\n\n    useEffect(() => {\n        if (isOpen) {\n            window.addEventListener(\"click\", handlerClickWithouItemAnswerQuestion);\n        } else {\n            window.removeEventListener(\"click\", handlerClickWithouItemAnswerQuestion);\n        }\n\n        return () => {\n            window.removeEventListener(\"click\", handlerClickWithouItemAnswerQuestion);\n        }\n    }, [isOpen]);\n\n    return (\n        <>\n            {isOpen && <BlackBackground />}\n\n            <div style={styleItemAnswerQuestion} className=\"ItemAnswerQuestion\" id={id}>\n                <div\n                    onClick={!isDisabledClick && onClick}\n                    className=\"ItemAnswerQuestion__question-wrap\"\n                >\n                    <p className=\"ItemAnswerQuestion__question-text\">\n                        {questionText}\n                    </p>\n\n                    <span className=\"ItemAnswerQuestion__arrow\">\n                        <Arrow\n                            direction={isOpen ?directionArrow.UP :directionArrow.DOWN}\n                            typeColor={isGrey ?colorsArrow.GREY :typeColor}\n                        />\n                    </span>\n                </div>\n\n                <div ref={refWrapContent} style={styleWrapAnswers} className=\"ItemAnswerQuestion__wrap-answers\">\n                    {\n                        indexUserAnswer !== indexRightAnswer &&\n                        <div className=\"ItemAnswerQuestion__answer\">\n                            <div className=\"ItemAnswerQuestion__title-answer-wrap ItemAnswerQuestion__title-answer-wrap_bad\">\n                                <h2\n                                    className=\"ItemAnswerQuestion__title-answer ItemAnswerQuestion__title-answer_bad\"\n                                >Ваш ответ</h2>\n                            </div>\n\n                            <p className=\"ItemAnswerQuestion__text-answer\">\n                                {getAnswerText(indexUserAnswer)}\n                            </p>\n                        </div>\n                    }\n\n                    <div className=\"ItemAnswerQuestion__answer\">\n                        <div className=\"ItemAnswerQuestion__title-answer-wrap ItemAnswerQuestion__title-answer-wrap_good\">\n                            <h2\n                                className=\"ItemAnswerQuestion__title-answer ItemAnswerQuestion__title-answer_good\"\n                            >\n                                {\n                                    indexUserAnswer === indexRightAnswer\n                                        ? \"Ваш ответ верен\"\n                                        : \"Правильный ответ\"\n                                }\n                            </h2>\n                        </div>\n\n                        <p className=\"ItemAnswerQuestion__text-answer\">\n                            {getAnswerText(indexRightAnswer)}\n                        </p>\n                    </div>\n\n                    <div className=\"ItemAnswerQuestion__answer\">\n                        <div className=\"ItemAnswerQuestion__title-answer-wrap ItemAnswerQuestion__title-answer-wrap_normal\">\n                            <h2\n                                className=\"ItemAnswerQuestion__title-answer ItemAnswerQuestion__title-answer_normal\"\n                            >Остальные варианты</h2>\n                        </div>\n\n                        {\n                            question.answerOptions.map((answer, i) => {\n                                if (i === indexRightAnswer || i === indexUserAnswer) {\n                                    return null;\n                                }\n\n                                return (\n                                    <p key={i} className=\"ItemAnswerQuestion__text-answer\">\n                                        {answer.text}\n                                    </p>\n                                )\n                            })\n                        }\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default ItemAnswerQuestion;\n","import { Icon24Back } from '@vkontakte/icons';\nimport { Panel, PanelHeader, PanelHeaderButton, View } from '@vkontakte/vkui';\nimport React, { useState } from 'react';\nimport Header from '../../components/Header/Header';\n\nimport \"./AnswersQuestions.css\";\nimport ItemAnswerQuestion from './ItemAnswerQuestion/ItemAnswerQuestion';\n\nconst AnswersQuestions = ({id, questions, indexesAnswers, onBack=()=>{}}) => {\n    const [isAllGrey, setIsAllGrey] = useState(false);\n\n    return (\n        <View id={id} activePanel=\"PANEL_ANSWERS_QUESTIONS\">\n            <Panel id=\"PANEL_ANSWERS_QUESTIONS\">\n                <Header\n                text=\"Вопросы\"\n                leftBtnFunc={onBack}>\n                </Header>\n                {/* <PanelHeader\n                    left={\n                        <>\n                            <PanelHeaderButton onClick={onBack}>\n                                <Icon24Back fill=\"white\" />\n                            </PanelHeaderButton>\n                            <h1 className=\"AnswersQuestions__title\">Вопросы</h1>\n                        </>\n                    }\n                    className=\"AnswersQuestions__PanelHeader\"\n                    separator={false}\n                    transparent={false}\n                    visor={false}\n                ></PanelHeader> */}\n\n                <div className=\"AnswersQuestions\">\n                    {\n                        questions.map((q, i) => (\n                            <ItemAnswerQuestion\n                                id={`ItemAnswerQuestion-${i}`}\n                                key={i}\n                                question={q}\n                                indexRightAnswer={questions[i].answerOptions.findIndex(a => a.score === 1)}\n                                indexUserAnswer={indexesAnswers[i]}\n                                isGrey={isAllGrey}\n                                setIsAllGrey={setIsAllGrey}\n                            />\n                        ))\n                    }\n                </div>\n            </Panel>\n        </View>\n    )\n}\n\nexport default AnswersQuestions;\n","import React, { useState, useEffect } from 'react';\nimport bridge from '@vkontakte/vk-bridge';\nimport ScreenSpinner from '@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner';\nimport '@vkontakte/vkui/dist/vkui.css';\nimport vkBridge from '@vkontakte/vk-bridge'\n\nimport { AdaptivityProvider, ModalRoot, AppRoot, ConfigProvider, ModalPage, Header, Panel, PanelHeader, Platform, Root, Scheme, SimpleCell, SplitCol, SplitLayout, View, usePlatform } from '@vkontakte/vkui';\n\nimport \"./App.css\";\nimport StartWindow from './panels/StartWindow/StartWindow';\nimport ListAge from './panels/ListAge/ListAge';\nimport ListQuestions from './panels/ListQuestions/ListQuestions';\nimport Result from './panels/Result/Result';\nimport ListQuizes from './panels/ListQuizes/ListQuizes';\nimport AnswersQuestions from './panels/AnswersQuestions/AnswersQuestions';\nimport Modal from './panels/ListQuestions/IteamListQuestion/Modal/Modal';\nimport ModalPageHead from './components/ModalPageHead/ModalPageHead';\n\nconst App = ({ eras, results, MAX_SCORE, \n\tsavePercentQuiz = (indexAge, indexQuiz, percentProgress) => {}}) => {\n\n\tuseEffect(() => {\n\t\t//Стилизуем компоненты интерфейса клиента\n\t\tbridge\n\t\t\t.send(\"VKWebAppGetClientVersion\")\n\t\t\t.then(data => {\n\t\t\t\tif(data.platform === Platform.IOS){\n\t\t\t\t\tbridge.send(\"VKWebAppSetViewSettings\", {\"status_bar_style\": \"light\"});\n\t\t\t\t}\n\t\t\t\telse if (data.platform === Platform.ANDROID){\n\t\t\t\t\tbridge.send(\"VKWebAppSetViewSettings\", {\"status_bar_style\": \"light\", \"action_bar_color\": \"#000\",\"navigation_bar_color\":\"#000000\"});\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error =>{\n\t\t\t\tconsole.log(error)\n\t\t\t})\n\t\t\n\t\t//Обновляем текущую ширину\n\t\tsetCurWidth(document.getElementById('root').scrollWidth)\n\t}, []);\n\n\t// логика переключения между View\n\tconst VIEW_ID_START_WINDOW = \"VIEW_ID_START_WINDOW\";\n\tconst VIEW_ID_LIST_AGE_AND_QUIZES = \"VIEW_ID_LIST_AGE_AND_QUIZES\";\n\tconst VIEW_ID_LIST_QUESTIONES = \"VIEW_ID_LIST_QUESTIONES\";\n\tconst VIEW_ID_RESULT = \"VIEW_ID_RESULT\";\n\tconst VIEW_ID_ANSWERS_QUESTIONS = \"VIEW_ID_ANSWERS_QUESTIONS\";\n\n\t// логика переключения между Панелями\n\tconst PANEL_ID_LIST_AGE = \"PANEL_ID_LIST_AGE\";\n\tconst PANEL_ID_LIST_QUIZES = \"PANEL_ID_LIST_QUIZES\";\n\n\n\tconst [activeView, setActiveView] = useState(VIEW_ID_LIST_AGE_AND_QUIZES);\n\tconst [activePanel, setActivePanel] = useState(PANEL_ID_LIST_AGE);\n\tconst [history, setHistory] = useState([PANEL_ID_LIST_AGE]);\n\tconst [curWidth, setCurWidth] = useState(0)\n\n\tconst goToViewStartWindow = () => setActiveView(VIEW_ID_START_WINDOW);\n\tconst goToViewListAndQuizes = () => setActiveView(VIEW_ID_LIST_AGE_AND_QUIZES)\n\tconst goToViewListQuestions = () => setActiveView(VIEW_ID_LIST_QUESTIONES);\n\tconst goToViewResult = () => setActiveView(VIEW_ID_RESULT);\n\tconst goToViewAnswersQuestions = () => setActiveView(VIEW_ID_ANSWERS_QUESTIONS);\n\n\tconst goToPanelListAge = () => setActivePanel(PANEL_ID_LIST_AGE);\n\tconst goToPanelListQuizes = () => setActivePanel(PANEL_ID_LIST_QUIZES);\n\n\t// логика хранения индексов\n\tconst [indexAge, setIndexAge] = useState(0);\n\tconst [indexQuiz, setIndexQuiz] = useState(0);\n\tconst [indexResuslt, setIndexResult] = useState(0);\n\n\t// логика хранения ответов\n\tconst [indexesAnswers, setIndexesAnswers] = useState([]);\n\n\t// первый раз открываем Result\n\tconst [isFirstOpenResult, setIsFirstOpenResult] = useState(true);\n\n\t// функции для StartWindowY\n\tconst onClickStartWindow = () => {\n\t\tgoToViewListAndQuizes();\n\t}\n\n\t// функции для ListAge\n\tconst createOnClickItemAge = (index) => () => {\n\t\tgoForward(PANEL_ID_LIST_QUIZES);\n\t\tsetIndexAge(index);\n\t\tgoToPanelListQuizes();\n\t}\n\n\t// функции для ListQuizes\n\tconst onBackListQuizes = () => {\n\t\tsetIsFirstOpenResult(true);\n\t\tgoBack(PANEL_ID_LIST_AGE)\n\t}\n\n\tconst createOnClickItemQuizes = (index) => () => {\n\t\tsetIndexQuiz(index);\n\t\tgoToViewListQuestions();\n\t}\n\n\t// функции для ListQuestions\n\tconst onBackListQuestions = () => {\n\t\tgoToViewListAndQuizes();\n\t\tgoToPanelListQuizes();\n\t}\n\n\tconst onFinishListQuestions = (totalScore, indexesAnswers) => {\n\t\tsetIndexesAnswers(indexesAnswers);\n\n\t\tconst percent = Math.round(totalScore / MAX_SCORE * 100);\n\t\tsavePercentQuiz(indexAge, indexQuiz, percent);\n\t\tsetIndexResult(results.findIndex(res => res.percent === percent));\n\t\tgoToViewResult();\n\t}\n\n\t// функции для Result\n\tconst onBackResult = () => {\n\t\tgoToViewListAndQuizes();\n\t}\n\n\tconst onAgainResult = () => {\n\t\tgoToViewListQuestions();\n\t}\n\t\n\tconst onGoToAnswersQuestionResult = () => {\n\t\tgoToViewAnswersQuestions()\n\t}\n\n\t// функции для AnswersQuestions\n\tconst onBackAnswersQuestions = () => {\n\t\tgoToViewResult();\n\t}\n\n\t// история\n\tconst goBack = () => {\n\t\tlet his = history;\n\t\this.pop()\n\t\tif (activePanel === PANEL_ID_LIST_AGE) {\n\t\t\tvkBridge.send('VKWebAppEnableSwipeBack');\n\t\t  }\n\t\tsetHistory(his)\n\t\tsetActivePanel(history[history.length - 1])\t\n\t}\n\n\tconst goForward = (view) => { \n\t\tlet his = history;\n\t\this.push(view);\n\t\tif (activePanel === PANEL_ID_LIST_AGE) {\n\t\t\tvkBridge.send('VKWebAppDisableSwipeBack');\n\t\t\tsetHistory(his)\n\t\t  }\n\t\telse{\n\t\t\tsetHistory(his)\n\t\t}\n\t}\n\n\n\t// Модальное окно\n\n\tconst MODAL_ID = \"MODAL_ID\"\n\tconst platform = usePlatform()\n\tconst [isModalOpen, setModalOpen] = useState(null)\n    const changeModal = () => {\n\t\tconsole.log(platform)\n        if(isModalOpen === MODAL_ID){\n            setModalOpen(null)\n        }\n        else{\n            setModalOpen(MODAL_ID)\n        }\n    }\n\n    const modal = (\n        <ModalRoot activeModal={isModalOpen} onClose={changeModal} onClick={() => {console.log(\"6+56\")}}>\n            <ModalPage \n                id={MODAL_ID}\n                settlingHeight={100}\n                // header={\n                //     <ModalPageHead text=\"Вопросы\" curWidth={curWidth} onClose={changeModal}></ModalPageHead>\n                // }\n\t\t\t\t>\n\t\t\t\t\t26+56\n            </ModalPage>\n        </ModalRoot>\n    )\n\n\n\treturn (\n\t<ConfigProvider isWebView={true}>\n\t\t<AdaptivityProvider>\n\t\t\t<AppRoot>\n\t\t\t\t<SplitLayout header={null}>\n\t\t\t\t\t<SplitCol>\n\t\t\t\t\t\t<Root activeView={activeView}>\n\n\t\t\t\t\t\t\t<View id=\"TEST_ID\">\n\t\t\t\t\t\t\t\t<button onClick={changeModal}></button>\n\t\t\t\t\t\t\t</View>\n\n\t\t\t\t\t\t\t<StartWindow \n\t\t\t\t\t\t\t\tid={VIEW_ID_START_WINDOW} \n\t\t\t\t\t\t\t\tonClick={onClickStartWindow}/>\n\n\t\t\t\t\t\t\t<View \n\t\t\t\t\t\t\t\tid={VIEW_ID_LIST_AGE_AND_QUIZES}\n\t\t\t\t\t\t\t\tactivePanel={activePanel}\n\t\t\t\t\t\t\t\tonSwipeBack={goBack}\n\t\t\t\t\t\t\t\thistory={history}>\n\n\t\t\t\t\t\t\t\t<ListAge \n\t\t\t\t\t\t\t\t\tid={PANEL_ID_LIST_AGE} \n\t\t\t\t\t\t\t\t\teras={eras} \n\t\t\t\t\t\t\t\t\tcurWidth={curWidth}\n\t\t\t\t\t\t\t\t\tcreateOnClickItemAge={createOnClickItemAge}\n\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t\t<ListQuizes \n\t\t\t\t\t\t\t\t\tid={PANEL_ID_LIST_QUIZES} \n\t\t\t\t\t\t\t\t\tcurWidth={curWidth}\n\t\t\t\t\t\t\t\t\t// title={eras[indexAge].title} \n\t\t\t\t\t\t\t\t\t// quizes={eras[indexAge].quizzes} \n\t\t\t\t\t\t\t\t\ttitle={eras[0].title} \n\t\t\t\t\t\t\t\t\tquizes={eras[0].quizzes} \n\t\t\t\t\t\t\t\t\tonBack={onBackListQuizes} \n\t\t\t\t\t\t\t\t\tcreateOnClickItemQuizes={createOnClickItemQuizes}\n\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t</View>\n\n\t\t\t\t\t\t\t<ListQuestions \n\t\t\t\t\t\t\t\tid={VIEW_ID_LIST_QUESTIONES}\n\t\t\t\t\t\t\t\tcurWidth={curWidth}\n\t\t\t\t\t\t\t\tarrQuestions={eras[indexAge].quizzes[indexQuiz].questions}\n\t\t\t\t\t\t\t\tonBack={onBackListQuestions}\n\t\t\t\t\t\t\t\tonFinish={onFinishListQuestions}\n\t\t\t\t\t\t\t\ttest={changeModal}\n\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t<Result\n\t\t\t\t\t\t\t\tid={VIEW_ID_RESULT}\n\t\t\t\t\t\t\t\tpercent={results[indexResuslt].percent}\n\t\t\t\t\t\t\t\tyear={results[indexResuslt].year}\n\t\t\t\t\t\t\t\thistoricalEvent={results[indexResuslt].historicalEvent}\n\t\t\t\t\t\t\t\tquizes={eras[indexAge].quizzes.filter(quiz => quiz.percentProgress !== 100)}\n\t\t\t\t\t\t\t\tonBack={onBackResult}\n\t\t\t\t\t\t\t\tcreateOnClickItemQuizes={createOnClickItemQuizes}\n\t\t\t\t\t\t\t\tonAgain={onAgainResult}\n\t\t\t\t\t\t\t\tonGoToAnswersQuestion={onGoToAnswersQuestionResult}\n\t\t\t\t\t\t\t\tisFirstOpenResult={isFirstOpenResult}\n\t\t\t\t\t\t\t\tsetIsFirstOpenResult={setIsFirstOpenResult}\n\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t<AnswersQuestions\n\t\t\t\t\t\t\t\tid={VIEW_ID_ANSWERS_QUESTIONS}\n\t\t\t\t\t\t\t\tquestions={eras[indexAge].quizzes[indexQuiz].questions}\n\t\t\t\t\t\t\t\tindexesAnswers={indexesAnswers}\n\t\t\t\t\t\t\t\tonBack={onBackAnswersQuestions}\n\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t{/* <View activePanel=\"main\" id={TEST}>\n\t\t\t\t\t\t\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t\t\t\t\t\t<PanelHeader>VKUI</PanelHeader>\n\t\t\t\t\t\t\t\t\t\t<Group header={<Header mode=\"secondary\">Items</Header>}>\n\t\t\t\t\t\t\t\t\t\t\t<SimpleCell>Hello</SimpleCell>\n\t\t\t\t\t\t\t\t\t\t\t<SimpleCell>World</SimpleCell>\n\t\t\t\t\t\t\t\t\t\t</Group>\n\t\t\t\t\t\t\t\t\t\t</Panel>\n\t\t\t\t\t\t\t\t\t</View> */}\n\n\t\t\t\t\t\t\t{/* <Modal\n\t\t\t\t\t\t\t\tid={MODAL_TEST}\n\t\t\t\t\t\t\t\tidInside={activeModal}\n\t\t\t\t\t\t\t/> */}\n\t\t\t\t\t\t</Root>\n\t\t\t\t\t</SplitCol>\n\t\t\t\t</SplitLayout>\n\t\t\t</AppRoot>\n    \t</AdaptivityProvider>\n    </ConfigProvider>\n\t);\n}\n\nexport default App;\n","import imagePetr1 from \"../../img/ageRussianEmpire/quizPetr1/petr.png\";\n\nimport imgExample from \"../../img/ageRussianEmpire/quizPetr1/Картинка.png\";\n\nimport ababa from \"../../img/ageRussianEmpire/main.png\"\n\nconst quizPetr1 = {\n    title: \"Император Пётр I\",\n    description:\"Росси́йская импе́рия (рус. дореф. Россійская имперія; также Всеросси́йская импе́рия, ца́рская Росси́я) — государство, существовавшее в период с 22 октября (2 ноября) 1721 года до Февральской революции и провозглашения республики в сентябре 1917 года Временным правительством.\",\n    percentProgress: 0,\n    numberOfQuestions: 8,\n    imageSrc: imagePetr1,\n    questions: [\n        {\n            imageSrc: imgExample,\n            overSideImg: imgExample,\n            questionText: \"Основная причина дефолта 98-го года?\",\n            answerOptions: [\n                {\n                    text: \"Лопнул пузырь ГКО (Государственные краткосрочные облигации)\",\n                    score: 1\n                },\n                {\n                    text: \"Отказ западных партнёров выдать кредит\",\n                    score: 0\n                },\n                {\n                    text: \"Решение о срочном запуске печатного станка в “ускоренном режиме\",\n                    score: 0\n                }\n            ]\n        },\n        {\n            imageSrc: imgExample,\n            overSideImg: null,\n            questionText: \"Вопрос 2\",\n            answerOptions: [\n                {\n                    text: \"1\",\n                    score: 0\n                },\n                {\n                    text: \"2\",\n                    score: 1\n                },\n                {\n                    text: \"3\",\n                    score: 0\n                }\n            ],\n        },\n        {\n            imageSrc: imgExample,\n            overSideImg: null,\n            questionText: \"Вопрос 3\",\n            answerOptions: [\n                {\n                    text: \"1\",\n                    score: 1\n                },\n                {\n                    text: \"2\",\n                    score: 0\n                },\n                {\n                    text: \"3\",\n                    score: 0\n                }\n            ],\n        },\n        {\n            imageSrc: imgExample,\n            overSideImg: null,\n            questionText: \"Вопрос 4\",\n            answerOptions: [\n                {\n                    text: \"1\",\n                    score: 1\n                },\n                {\n                    text: \"2\",\n                    score: 0\n                },\n                {\n                    text: \"3\",\n                    score: 0\n                }\n            ]\n        }\n    ]\n}\n\nexport default quizPetr1;\n","import imageTheEraOfPalaceCoups from \"../../img/ageRussianEmpire/The era of palace coups/The era of palace coups.png\";\n\nconst quizTheEraOfPalaceCoups = {\n    title: \"Эпоха Дворцовых переворотов\",\n    imageSrc: imageTheEraOfPalaceCoups,\n    questions: []\n}\n\nexport default quizTheEraOfPalaceCoups;\n","import mainImage from \"../../img/ageRussianEmpire/quizPetr1/petr.png\";\nimport quizPetr1 from \"./quizPetr1\";\nimport quizTheEraOfPalaceCoups from \"./quizTheEraOfPalaceCoups\";\n\nconst ageRussianEmpire = {\n    title: \"Империя\",\n    shortTitle: \"Империя\",\n    imageSrc: mainImage,\n    description:\"Росси́йская импе́рия (рус. дореф. Россійская имперія; также Всеросси́йская импе́рия, ца́рская Росси́я) — государство, существовавшее в период с 22 октября (2 ноября) 1721 года до Февральской революции и провозглашения республики в сентябре 1917 года Временным правительством.\",\n    percentProgress: 0,\n    numberOfQuestions:10,\n    quizzes: [\n        quizPetr1,\n        quizTheEraOfPalaceCoups\n    ]\n}\n\nexport default ageRussianEmpire;\n","import ageRussianEmpire from \"./ageRussianEmpire/ageRussianEmpire\";\n\nimport results from \"./results/results\";\n\nconst store = {\n    eras: [\n        ageRussianEmpire,\n        ageRussianEmpire,\n        ageRussianEmpire,\n        ageRussianEmpire,\n        ageRussianEmpire\n    ],\n\n    results,\n\n    MAX_SCORE: 8\n}\n\nexport default store;\n\nconst calculatePercentAge = (era) => {\n    const numberOfPassedQuizes = era.quizzes.reduce((sum, quiz) => {\n        return quiz.percentProgress !== undefined ?sum + 1 :sum\n    }, 0);\n\n    return Math.round(numberOfPassedQuizes / era.length * 100);\n}\n\nexport const savePercentQuiz = (indexAge, indexQuiz, percentProgress) => {\n    store.eras = store.eras.map((era, i) => {\n        if (i !== indexAge) {\n            return era;\n        }\n\n        if (era.quizzes[indexQuiz].percentProgress === undefined) {\n            era.quizzes[indexQuiz].percentProgress = percentProgress;\n        } else {\n            era.quizzes[indexQuiz].percentProgress = Math.max(percentProgress, era.quizzes[indexQuiz].percentProgress);\n        }\n\n        era.percentProgress = calculatePercentAge(era);\n\n        return {...era};\n    })\n}\n","const results = [\n    {\n        percent: 0,\n        year: \"1700\",\n        historicalEvent: \"Начало Северной войны со Швецией\"\n    },\n    {\n        percent: 13,\n        year: \"1013\",\n        historicalEvent: \"Какое-то событие\"\n    },\n    {\n        percent: 25,\n        year: \"1025\",\n        historicalEvent: \"Какое-то событие\"\n    },\n    {\n        percent: 38,\n        year: \"1038\",\n        historicalEvent: \"Какое-то событие\"\n    },\n    {\n        percent: 50,\n        year: \"1050\",\n        historicalEvent: \"Какое-то событие\"\n    },\n    {\n        percent: 63,\n        year: \"1063\",\n        historicalEvent: \"Какое-то событие\"\n    },\n    {\n        percent: 75,\n        year: \"1075\",\n        historicalEvent: \"Какое-то событие\"\n    },\n    {\n        percent: 88,\n        year: \"1088\",\n        historicalEvent: \"Какое-то событие\"\n    },\n    {\n        percent: 100,\n        year: \"1100\",\n        historicalEvent: \"в Витичеве прошёл 2-й съезд князей Киевской Рус\"\n    }\n]\n\nexport default results;\n","import \"core-js/features/map\";\nimport \"core-js/features/set\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport App from \"./App\";\n\nimport store, { savePercentQuiz } from \"./store/store.js\";\n\n// Init VK  Mini App\nbridge.send(\"VKWebAppInit\");\n\nReactDOM.render(\n    <App {...store} savePercentQuiz={savePercentQuiz}/>, \n    document.getElementById(\"root\")\n);\n\nimport(\"./eruda\").then(({ default: eruda }) => {}); //runtime download\n\n","module.exports = __webpack_public_path__ + \"static/media/Картинка.f17bd5e3.png\";","module.exports = __webpack_public_path__ + \"static/media/petr.58cb079c.png\";"],"sourceRoot":""}