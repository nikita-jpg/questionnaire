{"version":3,"sources":["panels/ListAge/petr.jpg","panels/ListQuestions/IteamListQuestion/BottomSheet/rectangle.svg","panels/ListQuestions/IteamListQuestion/BottomSheet/candelabrum.svg","img/ageRussianEmpire/main.png","img/ageRussianEmpire/The era of palace coups/The era of palace coups.png","panels/StartWindow/StartWindow.js","panels/ListAge/ListAge.js","components/BlackBackground/BlackBackground.js","panels/ListQuestions/IteamListQuestion/IteamListQuestion.js","panels/ListQuestions/ListQuestions.js","anime/animate.js","anime/easeOut.js","components/ListQuizes/ItemListQuizes/ItemListQuizes.js","components/ListQuizes/ListQuizes.js","panels/Result/ResultButtons/ResultButtons.js","panels/Result/Result.js","panels/ViewListQuizes/ViewListQuizes.js","panels/AnswersQuestions/ItemAnswerQuestion/Arrow.js","panels/AnswersQuestions/ItemAnswerQuestion/ItemAnswerQuestion.js","panels/AnswersQuestions/AnswersQuestions.js","App.js","store/ageRussianEmpire/quizPetr1.js","store/ageRussianEmpire/quizTheEraOfPalaceCoups.js","store/ageRussianEmpire/ageRussianEmpire.js","store/store.js","store/results/results.js","index.js","img/ageRussianEmpire/quizPetr1/Картинка.png","img/ageRussianEmpire/quizPetr1/petr.png","panels/StartWindow/contacts.svg"],"names":["module","exports","StartWindow","id","onClick","activePanel","separator","className","width","height","src","svgContacts","alt","ListAge","eras","curWidth","createOnClickItemAge","index","visor","transparent","fixed","left","style","right","textAlign","size","getColNumber","map","age","i","arrAge","header","title","percentProgress","image","test","caption","description","BlackBackground","children","IteamListQuestion","platform","question","numberCurrentQuestion","countQuestions","indexAnswer","stateAnswers","lastIndexQuestion","currentIndexQuestion","goToLastQuestion","goToPrevQuestion","goToQuestionWithoutAnswer","goToNextQuestion","onFinish","useState","isRotated","setRotate","rotateImage","fill","undefined","overSideImg","questionImg","questionText","answerOptions","answer","key","text","ListQuestions","arrQuestions","onBack","totalScore","createIdActivePanel","getInitStateAnswers","substring","setStateAnswers","calculateScore","reduce","sum","dataAnswer","indexQuestion","score","setIndexQuestion","resetData","createGoToNextQuestion","maxLength","giveAnswer","createGoToPrevQuestion","setLastIndexQuestion","arr","length","fromIndexQuestion","toIndexQuestion","animate","timing","draw","duration","start","performance","now","requestAnimationFrame","time","timeFraction","progress","easeOut","ItemListQuizes","classNamePersentProgress","imageSrc","ListQuizes","quizes","createOnClickItemQuizes","quiz","ResultButtons","onAgain","onGoToAnswersQuestion","Result","initialTransitionYearX","year","percent","historicalEvent","isFirstOpenResult","setIsFirstOpenResult","modifyIsFirstOpenResult","f","WIDTH_YEAR","WIDTH_POSTFIX","String","WIDTH_PRETFIX","stringPrefix","replace","widthContent","document","documentElement","clientWidth","PADDING_LEFT_AND_RIGHT","shiftX","WIDTH_PERCENT","initialStyles","overflowResult","opacityPercent","opacityPrefixYear","transitionYearY","clientHeight","HEIGHT_YEAR","transitionYearX","opacityHistoricalEvent","transitionContentY","opacityContent","finishStyles","styles","setStyles","stylePercent","opacity","stylePrefixYear","styleYear","transform","styleHistoricalEvent","styleContent","styleResult","overflow","useEffect","setTimeout","newStyles","getProgressStyle","min","max","progressStyles","newTransition","getClassNameForPercent","args1","ViewListQuizes","ID_ACTIVE_PANEL","colorsArrow","directionArrow","Arrow","direction","typeColor","styleSVG","transition","viewBox","xmlns","cx","cy","r","fillRule","clipRule","d","getColor","ItemAnswerQuestion","indexRightAnswer","indexUserAnswer","isGrey","setIsAllGrey","isFirstRender","setIsFirstRender","isOpen","setIsOpen","isDisabledClick","setIsDisabledClick","setQuestionText","Math","floor","getAnswerText","heightWrapContent","setHeightWrapContent","refWrapContent","createRef","current","offsetHeight","styleWrapAnswers","position","visibility","padding","boxSizing","getStyleWrapAnswers","styleItemAnswerQuestion","zIndex","handlerClickWithouItemAnswerQuestion","e","target","closest","window","addEventListener","removeEventListener","ref","AnswersQuestions","questions","indexesAnswers","isAllGrey","q","findIndex","a","App","results","MAX_SCORE","savePercentQuiz","indexAge","indexQuiz","bridge","send","then","data","Platform","IOS","ANDROID","catch","error","console","log","setCurWidth","getElementById","scrollWidth","activeView","setActiveView","goToViewListAge","goToViewListQuizes","goToViewListQuestions","goToViewResult","setIndexAge","setIndexQuiz","indexResuslt","setIndexResult","setIndexesAnswers","shortTitle","quizzes","round","res","filter","quizPetr1","imagePetr1","imgExample","quizTheEraOfPalaceCoups","imageTheEraOfPalaceCoups","ageRussianEmpire","mainImage","store","ReactDOM","render","era","numberOfPassedQuizes","calculatePercentAge","default"],"mappings":"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","file":"static/js/main.8bd507b1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/petr.df3769a3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rectangle.1386c6fd.svg\";","module.exports = __webpack_public_path__ + \"static/media/candelabrum.0d4d7bb2.svg\";","module.exports = __webpack_public_path__ + \"static/media/main.96699d6f.png\";","module.exports = __webpack_public_path__ + \"static/media/The era of palace coups.42e7310b.png\";","import { Card, CardScroll, Panel, PanelHeader, View, CardGrid, ContentCard, Button} from '@vkontakte/vkui';\r\nimport React from 'react';\r\nimport test from '../../img/ageRussianEmpire/quizPetr1/petr.png'\r\n\r\nimport svgContacts from './contacts.svg';\r\n\r\nimport './StartWindow.css';\r\n\r\n\r\nconst StartWindow = ({id, onClick}) => {\r\n    const ID_ACTIVE_PANEL = \"ID_ACTIVE_PANEL\";\r\n\r\n    return (\r\n        <View activePanel={ID_ACTIVE_PANEL} id={id}>\r\n            <Panel id={ID_ACTIVE_PANEL} separator={false}>\r\n                <div className=\"StartWindow\">\r\n                    <div className=\"StartWindow__container\">\r\n                        <img width=\"50\" height=\"50\" src={svgContacts} alt=\"contacts\"/>\r\n                        <h1 className=\"StartWindow__title\">Привет, друг!1</h1>\r\n                        <p className=\"StartWindow__text\">\r\n                            Это приложение поможет тебе проверить свои знания в области истори родной страны. Удачи!\r\n                        </p>\r\n                        <button className=\"StartWindow__button\" onClick={onClick}>Поехали!</button>\r\n                    </div>\r\n                </div>\r\n            </Panel>\r\n        </View>\r\n    );\r\n}\r\n\r\nexport default StartWindow;","import { PanelHeader, View, Panel, CardGrid, ContentCard, usePlatform } from '@vkontakte/vkui';\r\nimport React, { useState } from 'react';\r\nimport ItemListAge from './ItemListAge/ItemListAge';\r\nimport test from './petr.jpg'\r\nimport './ListAge.css'\r\n\r\nconst ListAge = ({id, eras,curWidth, createOnClickItemAge=index=>null}) => {\r\n\r\n    const ID_ACTIVE_PANEL = \"ID_ACTIVE_PANEL\";\r\n\r\n    const getColNumber = (curWidth) => {\r\n        if(curWidth>1280){\r\n            return \"s\"\r\n        }\r\n        else if (curWidth>560){\r\n            return \"m\"\r\n        }\r\n        else {\r\n            return \"l\"\r\n        } \r\n    }\r\n\r\n    return (\r\n        <View id={id} activePanel={ID_ACTIVE_PANEL} >\r\n            <Panel id={ID_ACTIVE_PANEL}>\r\n\r\n                <div className=\"ListAge\">\r\n                <PanelHeader                     \r\n                    separator={false}\r\n                    visor={true}\r\n                    transparent={true}\r\n                    fixed={false}\r\n                    // Центрируем надпись\r\n                    left={curWidth >= 370 ? <div style={{width:\"90px\"}}></div> : null}\r\n                    right={curWidth >= 370 ? <div style={{width:\"90px\"}}></div> : null}\r\n                    style={curWidth >= 370 ? {textAlign:\"center\"} : null}\r\n                    >\r\n                    Выбирете эпоху\r\n                </PanelHeader>\r\n                    <CardGrid size={getColNumber(curWidth)}>\r\n                        {\r\n                            eras.map((age, i, arrAge) => (\r\n                                <ContentCard\r\n                                    header={\r\n                                        <div className=\"ListAge__title\">\r\n                                            <div>{age.title}</div>\r\n                                            <div>{age.percentProgress}/10</div>\r\n                                        </div>\r\n                                    }\r\n                                    image={test}\r\n                                    caption={age.description}\r\n                                    className=\"ListAge__Card\"\r\n                                    onClick={createOnClickItemAge(i)}\r\n                                />\r\n                            ))\r\n                        }\r\n                    </CardGrid>\r\n                </div>\r\n            </Panel>\r\n        </View>\r\n    )\r\n}\r\n\r\nexport default ListAge;\r\n","import React from 'react';\r\n\r\nimport './BlackBackground.css';\r\n\r\nconst BlackBackground = ({children}) => {\r\n    return <div className=\"BlackBackground\">{children}</div>\r\n}\r\n\r\nexport default BlackBackground;\r\n","import { Icon24Back, Icon28ChevronBack } from '@vkontakte/icons';\r\nimport { ModalCard, Panel, PanelHeader, PanelHeaderButton, platform } from '@vkontakte/vkui';\r\nimport React, { useEffect, useState } from 'react';\r\nimport BottomSheet from './BottomSheet/BottomSheet';\r\n\r\nimport \"./IteamListQuestion.css\";\r\n\r\nconst osName = platform();\r\n\r\nconst IteamListQuestion = ({ id, question,\r\n    numberCurrentQuestion, countQuestions,\r\n    stateAnswers, indexAnswer,\r\n    lastIndexQuestion, currentIndexQuestion,\r\n    goToLastQuestion, goToQuestionWithoutAnswer,\r\n    goToPrevQuestion, goToNextQuestion,\r\n    onFinish = () => { } }) => {\r\n\r\n    const [isRotated, setRotate] = useState(false);\r\n\r\n    const rotateImage = () => setRotate(!isRotated);\r\n\r\n    const [isOpenList, setOpenList] = useState(false);\r\n    const openModal = () => setOpenList(!isOpenList)\r\n\r\n    return (\r\n        <Panel id={id} separator={false}>\r\n            <PanelHeader\r\n                left={\r\n                    <>\r\n                        <PanelHeaderButton onClick={goToPrevQuestion}>\r\n                            <Icon24Back fill=\"white\" />\r\n                        </PanelHeaderButton>\r\n                        <span className=\"IteamListQuestion__number-question\">{numberCurrentQuestion}/{countQuestions}</span>\r\n                    </>\r\n                }\r\n                className=\"IteamListQuestion__PanelHeader\"\r\n                separator={false}\r\n                visor={false}\r\n                transparent={false}\r\n            >\r\n            </PanelHeader>\r\n\r\n            {/* <ModalCard>\r\n\r\n            </ModalCard> */}\r\n\r\n            <div className=\"IteamListQuestion\">\r\n            {/* <button className=\"testButton\" onClick={openModal}></button> */}\r\n                <div className=\"IteamListQuestion__content\">\r\n                    {\r\n                        question.overSideImg !== undefined && question.overSideImg !== null\r\n                            ?\r\n                            <div\r\n                                className={`IteamListQuestion__image-wrap ${isRotated && \"IteamListQuestion__image-wrap_rotated\"}`}\r\n                            >\r\n                                <img\r\n                                    className=\"IteamListQuestion__image IteamListQuestion__image_hidden\"\r\n                                    src={question.questionImg}\r\n                                    alt={`image_hidden_${id}`}\r\n                                />\r\n\r\n                                <div className=\"IteamListQuestion__image-side-wrap IteamListQuestion__image-side-wrap_front\">\r\n                                    <img className=\"IteamListQuestion__image\" src={question.questionImg} alt={`image_front_${id}`} />\r\n\r\n                                    <button\r\n                                        onClick={rotateImage}\r\n                                        className=\"IteamListQuestion__rotate-button IteamListQuestion__rotate-button_front\"\r\n                                    ></button>\r\n                                </div>\r\n\r\n                                <div className={`IteamListQuestion__image-side-wrap \r\n                                    IteamListQuestion__image-side-wrap_back \r\n                                    ${!isRotated ? \"IteamListQuestion__image-side-wrap_disable\" : \"\"}`}\r\n                                >\r\n                                    <img className=\"IteamListQuestion__image\" src={question.overSideImg} alt={`image_back_${id}`} />\r\n\r\n                                    <button\r\n                                        onClick={rotateImage}\r\n                                        className=\"IteamListQuestion__rotate-button IteamListQuestion__rotate-button_back\"\r\n                                    ></button>\r\n                                </div>\r\n                            </div>\r\n\r\n                            : <div className=\"IteamListQuestion__image-wrap\">\r\n                                <img\r\n                                    className=\"IteamListQuestion__image\"\r\n                                    src={question.questionImg}\r\n                                    alt={`image_hidden_${id}`}\r\n                                />\r\n                            </div>\r\n                    }\r\n\r\n                    <p className=\"IteamListQuestion__question-text\">{question.questionText}</p>\r\n\r\n                    <div className=\"IteamListQuestion__answer-options\">\r\n                        {\r\n                            question.answerOptions.map((answer, i) => (\r\n                                <button\r\n                                    key={i}\r\n                                    className={\r\n                                        `IteamListQuestion__answer \r\n                                        ${indexAnswer === i && \"IteamListQuestion__answer_marked\"}`\r\n                                    }\r\n                                    onClick={() => goToNextQuestion(i)}\r\n                                >\r\n                                    {answer.text}\r\n                                </button>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n                {\r\n                    lastIndexQuestion !== -1 &&\r\n                    <div\r\n                        onClick={goToLastQuestion}\r\n                        className={\r\n                            `IteamListQuestion__go-to-last-question \r\n                                ${lastIndexQuestion > currentIndexQuestion\r\n                                ? \"IteamListQuestion__go-to-last-question_right\"\r\n                                : \"IteamListQuestion__go-to-last-question_left\"\r\n                            }`\r\n                        }\r\n                    >\r\n                        к вопросу {lastIndexQuestion + 1}\r\n                    </div>\r\n                }\r\n{/* \r\n                <BottomSheet\r\n                    stateAnswers={stateAnswers}\r\n                    onFinish={onFinish}\r\n                    goToQuestionWithoutAnswer={goToQuestionWithoutAnswer}\r\n                /> */}\r\n            </div>\r\n        </Panel>\r\n    )\r\n};\r\n\r\nexport default IteamListQuestion;\r\n","import { View } from '@vkontakte/vkui';\r\nimport React, { useState } from 'react';\r\nimport IteamListQuestion from './IteamListQuestion/IteamListQuestion';\r\n\r\nconst ListQuestions = ({id, arrQuestions, onBack=()=>{}, onFinish=totalScore=>{}}) => {\r\n    const createIdActivePanel = index => `IteamListQuestion-${index}`;\r\n\r\n    // логика хранения ответов\r\n    const getInitStateAnswers = () => [\r\n        ...arrQuestions.map(question => ({\r\n            questionText: question.questionText.substring(0, 15),\r\n            indexAnswer: -1\r\n        }))\r\n    ];\r\n\r\n    const [stateAnswers, setStateAnswers] = useState(getInitStateAnswers());\r\n\r\n    const giveAnswer = (indexQuestion, indexAnswer) => {\r\n        stateAnswers[indexQuestion].indexAnswer = indexAnswer;\r\n        setStateAnswers([...stateAnswers]);\r\n    }\r\n\r\n    const calculateScore = () => { \r\n        return stateAnswers.reduce((sum, dataAnswer, indexQuestion) => {\r\n            if (dataAnswer.indexAnswer === -1) {\r\n                return sum;\r\n            }\r\n\r\n            return sum + arrQuestions[indexQuestion].answerOptions[dataAnswer.indexAnswer].score;\r\n        }, 0);\r\n    }\r\n\r\n    const resetStateAnswers = () => setStateAnswers(getInitStateAnswers());\r\n\r\n    // логика переключения вопросов\r\n    const [indexQuestion, setIndexQuestion] = useState(0);\r\n\r\n    const resetData = () => {\r\n        resetStateAnswers();\r\n        setIndexQuestion(0);\r\n    }\r\n\r\n    const createGoToNextQuestion = (indexQuestion, maxLength) => (indexAnswer) => {\r\n        giveAnswer(indexQuestion, indexAnswer);\r\n\r\n        if (indexQuestion < maxLength - 1) {\r\n            setIndexQuestion(indexQuestion + 1);\r\n        } else {\r\n            onFinish(calculateScore(), stateAnswers.map(answer => answer.indexAnswer));\r\n            resetData();\r\n        }\r\n    }\r\n\r\n    const createGoToPrevQuestion = (indexQuestion) => () => {\r\n        if (indexQuestion > 0) {\r\n            setIndexQuestion(indexQuestion - 1);\r\n        } else {\r\n            onBack();\r\n            resetData();\r\n        }\r\n    }\r\n\r\n    // логика перехода к любому вопросу\r\n    const [lastIndexQuestion, setLastIndexQuestion] = useState(-1);\r\n\r\n    const createGoToQuestionWithoutAnswer = (fromIndexQuestion) => (toIndexQuestion) => {\r\n        if (fromIndexQuestion != toIndexQuestion)\r\n        {\r\n            setLastIndexQuestion(fromIndexQuestion);\r\n            setIndexQuestion(toIndexQuestion);\r\n        }\r\n    }\r\n\r\n    const goToLastQuestion = () => {\r\n        setIndexQuestion(lastIndexQuestion);\r\n        setLastIndexQuestion(-1);\r\n    }\r\n\r\n    return (\r\n        <View id={id} activePanel={createIdActivePanel(indexQuestion)}>\r\n            {\r\n                arrQuestions.map((question, i, arr) =>(\r\n                    <IteamListQuestion\r\n                        key={i}\r\n                        id={createIdActivePanel(i)}\r\n\r\n                        question={question}\r\n                        numberCurrentQuestion={i+1}\r\n                        countQuestions={arr.length}\r\n\r\n                        stateAnswers={stateAnswers}\r\n                        indexAnswer={stateAnswers[i].indexAnswer}\r\n\r\n                        lastIndexQuestion={lastIndexQuestion}\r\n                        currentIndexQuestion={i}\r\n                        goToLastQuestion={goToLastQuestion}\r\n                        goToQuestionWithoutAnswer={createGoToQuestionWithoutAnswer(i)}\r\n\r\n                        goToNextQuestion={createGoToNextQuestion(i, arr.length)}\r\n                        goToPrevQuestion={createGoToPrevQuestion(i)}\r\n\r\n                        onFinish={() => onFinish(calculateScore())}\r\n                    />\r\n                ))\r\n            }\r\n        </View>\r\n    )\r\n}\r\n\r\nexport default ListQuestions;\r\n","function animate({timing, draw, duration}) {\r\n\r\n    let start = performance.now();\r\n  \r\n    requestAnimationFrame(function animate(time) {\r\n      // timeFraction изменяется от 0 до 1\r\n      let timeFraction = (time - start) / duration;\r\n      if (timeFraction > 1) timeFraction = 1;\r\n  \r\n      // вычисление текущего состояния анимации\r\n      let progress = timing(timeFraction);\r\n  \r\n      draw(progress); // отрисовать её\r\n  \r\n      if (timeFraction < 1) {\r\n        requestAnimationFrame(animate);\r\n      }\r\n  \r\n    });\r\n}\r\n\r\nexport default animate;\r\n","function makeEaseOut(timing) {\r\n  return function (timeFraction) {\r\n    return 1 - timing(1 - timeFraction);\r\n  }\r\n}\r\n\r\nconst easeOut = makeEaseOut((timeFraction) => timeFraction);\r\n\r\nexport default easeOut;\r\n","import React from 'react';\r\n\r\nimport './ItemListQuizes.css';\r\n\r\nconst ItemListQuizes = ({ imageSrc, title, onClick, percentProgress }) => {\r\n    let classNamePersentProgress;\r\n\r\n    if (percentProgress === undefined) {\r\n        classNamePersentProgress = undefined;\r\n    } else if (percentProgress > 50) {\r\n        classNamePersentProgress = \"ItemListQuizes__percent_good\";\r\n    } else if (percentProgress > 25) {\r\n        classNamePersentProgress = \"ItemListQuizes__percent_normal\";\r\n    } else {\r\n        classNamePersentProgress = \"ItemListQuizes__percent_bad\";\r\n    }\r\n\r\n    return (\r\n        <li className=\"ItemListQuizes\">\r\n            <div className=\"ItemListQuizes__image-wrap\">\r\n                <img className=\"ItemListQuizes__image\" src={imageSrc} alt={`ItemListQuizes-${title}`} />\r\n\r\n                {\r\n                    classNamePersentProgress && <div className=\"ItemListQuizes__percent-wrap\">\r\n\r\n                        <span className={`ItemListQuizes__percent ${classNamePersentProgress}`}>{percentProgress}%</span>\r\n                    </div>\r\n                }\r\n            </div>\r\n\r\n            <div className=\"ItemListQuizes__row-bottom\">\r\n                <h2 className=\"ItemListQuizes__title\">{title}</h2>\r\n\r\n                <button onClick={onClick} className=\"ItemListQuizes__button-play\">Играть</button>\r\n            </div>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default ItemListQuizes;\r\n","import React from 'react';\r\nimport ItemListQuizes from './ItemListQuizes/ItemListQuizes';\r\n\r\nimport \"./ListQuizes.css\";\r\n\r\nconst ListQuizes = ({quizes, createOnClickItemQuizes = (index) => null }) => {\r\n    return (\r\n        <ul className=\"ListQuizes\">\r\n            {\r\n                quizes.map((quiz, i) => (\r\n                    <ItemListQuizes\r\n                        key={i}\r\n                        imageSrc={quiz.imageSrc}\r\n                        title={quiz.title}\r\n                        onClick={createOnClickItemQuizes(i)}\r\n                        percentProgress={quiz.percentProgress}\r\n                    />\r\n                ))\r\n            }\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default ListQuizes;\r\n","import React from \"react\";\r\n\r\nimport bridge from '@vkontakte/vk-bridge';\r\n\r\nimport '../Result.css';\r\n\r\nconst ResultButtons = ({onAgain=()=>{}, onGoToAnswersQuestion=()=>{}}) => {\r\n    const sendToHistory = (image) => {\r\n        console.log(image);\r\n\r\n        bridge.send(\"VKWebAppShowStoryBox\", {\r\n            \"background_type\": \"image\",\r\n            \"url\": \"https://nikita-jpg.github.io\" + image\r\n        });\r\n    }\r\n\r\n    const sendToWall = (image) => {\r\n        window.open(\"https://vk.com/share.php?url=https://nikita-jpg.github.io\" + image);\r\n    }\r\n\r\n    return (\r\n        <div className=\"Result__buttons-container\">\r\n            <button className=\"Result__button Result__button_favorite\">Поддержать</button>\r\n            <button \r\n                onClick={onAgain} \r\n                className=\"Result__button Result__button_refresh\">\r\n                Ещё раз\r\n            </button>\r\n            <button className=\"Result__button Result__button_share\">Поделиться</button>\r\n            <button \r\n                onClick={onGoToAnswersQuestion} \r\n                className=\"Result__button Result__button_format-list-bulleted\">\r\n                К вопросам\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ResultButtons;\r\n","import { Icon24Back } from \"@vkontakte/icons\";\r\nimport { Panel, PanelHeader, PanelHeaderButton, View } from \"@vkontakte/vkui\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nimport \"./Result.css\";\r\nimport animate from \"../../anime/animate\";\r\nimport easeOut from \"../../anime/easeOut\";\r\nimport ListQuizes from \"../../components/ListQuizes/ListQuizes\";\r\nimport ResultButtons from \"./ResultButtons/ResultButtons\";\r\n\r\nconst Result = ({ id, year, percent, historicalEvent, quizes, isFirstOpenResult, setIsFirstOpenResult,\r\n    onBack = () => { }, createOnClickItemQuizes = (index) => null,\r\n    onAgain=()=>{}, onGoToAnswersQuestion=()=>{} }) => {\r\n\r\n\tconst modifyIsFirstOpenResult = (f) => (...args) => {\r\n\t\tsetIsFirstOpenResult(true);\r\n\t\treturn f(...args);\r\n\t}\r\n\r\n    const getClassNameForPercent = (percent) => {\r\n        if (percent <= 39) {\r\n            return \"Result__year-postfix_bad\";\r\n        }\r\n\r\n        if (percent <= 69) {\r\n            return \"Result__year-postfix_normal\";\r\n        }\r\n\r\n        return \"Result__year-postfix_good\";\r\n    }\r\n\r\n    const HEIGHT_HEADER = 60;\r\n    const HEIGHT_YEAR = 76;\r\n    const WIDTH_CHAR_IN_YEAR = 58;\r\n    const WIDTH_PERCENT = 78;\r\n    const WIDTH_YEAR = WIDTH_CHAR_IN_YEAR * year.length;\r\n    const WIDTH_POSTFIX = WIDTH_CHAR_IN_YEAR * String(percent).length;\r\n    const WIDTH_PRETFIX = WIDTH_YEAR - WIDTH_POSTFIX;\r\n    const PADDING_LEFT_AND_RIGHT = 10;\r\n\r\n    const stringPrefix = String(year).replace(String(percent), \"\");\r\n    const widthContent = document.documentElement.clientWidth - PADDING_LEFT_AND_RIGHT * 2;\r\n\r\n    const shiftX = WIDTH_YEAR + WIDTH_PERCENT > widthContent\r\n        ?(widthContent - WIDTH_YEAR) / 2\r\n        :WIDTH_PERCENT / 2;\r\n\r\n    let initialTransitionYearX;\r\n\r\n    if (WIDTH_YEAR + WIDTH_PERCENT > widthContent) {\r\n        initialTransitionYearX = (widthContent - WIDTH_POSTFIX - WIDTH_PERCENT) / 2 + (WIDTH_YEAR + WIDTH_PERCENT - widthContent);\r\n    } else {\r\n        initialTransitionYearX = WIDTH_PRETFIX / 2;\r\n    }\r\n\r\n    const initialStyles = {\r\n        overflowResult: \"hidden\",\r\n        opacityPercent: 1,\r\n        opacityPrefixYear: 0,\r\n        transitionYearY: document.documentElement.clientHeight / 2 - HEIGHT_YEAR / 2 - HEIGHT_HEADER,\r\n        transitionYearX: -initialTransitionYearX,\r\n        opacityHistoricalEvent: 0,\r\n        transitionContentY: document.documentElement.clientHeight / 2 + HEIGHT_YEAR / 2,\r\n        opacityContent: 0\r\n    };\r\n\r\n    const finishStyles = {\r\n        overflowResult: \"\",\r\n        opacityPercent: 0,\r\n        opacityPrefixYear: 1,\r\n        transitionYearY: 0,\r\n        transitionYearX: shiftX,\r\n        opacityHistoricalEvent: 1,\r\n        transitionContentY: 0,\r\n        opacityContent: 1\r\n    }\r\n\r\n    const [styles, setStyles] = useState(isFirstOpenResult ?initialStyles :finishStyles);\r\n\r\n    const stylePercent = {\r\n        opacity: styles.opacityPercent\r\n    }\r\n\r\n    const stylePrefixYear = {\r\n        opacity: styles.opacityPrefixYear\r\n    }\r\n\r\n    const styleYear = {\r\n        transform: `translate(${styles.transitionYearX}px, ${styles.transitionYearY}px)`\r\n    }\r\n\r\n    const styleHistoricalEvent = {\r\n        opacity: styles.opacityHistoricalEvent,\r\n        transform: `translateY(${styles.transitionYearY}px)`\r\n    }\r\n\r\n    const styleContent = {\r\n        opacity: styles.opacityContent,\r\n        transform: `translateY(${styles.transitionContentY}px)`\r\n    }\r\n\r\n    const styleResult = {\r\n        overflow: styles.overflowResult\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isFirstOpenResult) {\r\n            setIsFirstOpenResult(false);\r\n        } else {\r\n            return;\r\n        }\r\n\r\n        setTimeout(() => animate({\r\n            timing: easeOut,\r\n\r\n            duration: 3000,\r\n\r\n            draw(progress) {\r\n                const newStyles = { ...styles };\r\n\r\n                const getProgressStyle = (min, max) => (progress - min) / (max - min);\r\n\r\n                if (progress < 0.33) {\r\n                    const progressStyles = getProgressStyle(0, 0.33);\r\n\r\n                    let newTransition = (initialStyles.transitionYearX - shiftX) * (1 - progressStyles) + shiftX;\r\n\r\n                    newStyles.opacityPercent = 1 - progressStyles;\r\n                    newStyles.opacityPrefixYear = progressStyles;\r\n                    newStyles.transitionYearX = newTransition;\r\n                } else {\r\n                    newStyles.opacityPrefixYear = finishStyles.opacityPrefixYear;\r\n                    newStyles.transitionYearX = finishStyles.transitionYearX;\r\n                    newStyles.opacityPercent = finishStyles.opacityPercent;\r\n                }\r\n\r\n                if (progress >= 0.33 && progress < 0.66) {\r\n                    const progressStyles = getProgressStyle(0.33, 0.66);\r\n\r\n                    newStyles.opacityHistoricalEvent = progressStyles;\r\n                } else if (progress >= 0.66) {\r\n                    newStyles.opacityHistoricalEvent = finishStyles.opacityHistoricalEvent;\r\n                }\r\n\r\n                if (progress >= 0.66 && progress < 1) {\r\n                    const progressStyles = getProgressStyle(0.66, 1);\r\n\r\n                    newStyles.transitionContentY = initialStyles.transitionContentY * (1 - progressStyles);\r\n                    newStyles.transitionYearY = initialStyles.transitionYearY * (1 - progressStyles);\r\n                    newStyles.opacityContent = progressStyles;\r\n                } else if (progress >= 1) {\r\n                    newStyles.transitionContentY = finishStyles.transitionContentY;\r\n                    newStyles.transitionYearY = finishStyles.transitionYearY;\r\n                    newStyles.opacityContent = finishStyles.opacityContent;\r\n                    newStyles.overflowResult = finishStyles.overflowResult;\r\n                }\r\n\r\n                setStyles(newStyles);\r\n            }\r\n        }), 1000);\r\n    }, []);\r\n\r\n    return (\r\n        <View id={id} activePanel=\"PANEL_RESULT\">\r\n            <Panel id=\"PANEL_RESULT\">\r\n                <PanelHeader\r\n                    className=\"Result__PanelHeader\"\r\n                    left={\r\n                        <>\r\n                            <PanelHeaderButton onClick={modifyIsFirstOpenResult(onBack)}>\r\n                                <Icon24Back fill=\"white\" />\r\n                            </PanelHeaderButton>\r\n                            <h1 className=\"Result__title\">Результаты</h1>\r\n                        </>\r\n                    }\r\n                    separator={false}\r\n                    visor={false}\r\n                    transparent={false}\r\n                >\r\n                </PanelHeader>\r\n\r\n                <div className=\"Result\" style={styleResult}>\r\n                    <div style={styleYear} className=\"Result__year\">\r\n                        <span style={stylePrefixYear} className=\"Result__year-prefix\">{stringPrefix}</span>\r\n                        <span className={getClassNameForPercent(percent)}>\r\n                            {percent}\r\n                            <span style={stylePercent}>%</span>\r\n                        </span>\r\n                    </div>\r\n\r\n                    <div style={styleHistoricalEvent} className=\"Result__historical-event\">{historicalEvent}</div>\r\n\r\n                    <div style={styleContent} className=\"Result__content\">\r\n                        <ResultButtons \r\n                            onAgain={modifyIsFirstOpenResult(onAgain)}\r\n                            onGoToAnswersQuestion={onGoToAnswersQuestion}\r\n                        />\r\n\r\n                        <ListQuizes\r\n                            quizes={quizes}\r\n                            createOnClickItemQuizes={\r\n                                (...args1) => (...args2) => {\r\n                                    createOnClickItemQuizes(...args1)(...args2);\r\n                                    setIsFirstOpenResult(true);\r\n                                }\r\n                            }\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </Panel>\r\n        </View>\r\n    )\r\n}\r\n\r\nexport default Result;\r\n","import { Icon24Back } from '@vkontakte/icons';\r\nimport { Panel, PanelHeader, View } from '@vkontakte/vkui';\r\nimport React from 'react';\r\nimport ListQuizes from '../../components/ListQuizes/ListQuizes';\r\n\r\nimport './ViewListQuizes.css';\r\n\r\nconst ViewListQuizes = ({ id, title, quizes, onBack = () => { }, createOnClickItemQuizes = (index) => null }) => {\r\n    const ID_ACTIVE_PANEL = `${id}-0`;\r\n\r\n    return (\r\n        <View id={id} activePanel={ID_ACTIVE_PANEL}>\r\n            <Panel id={ID_ACTIVE_PANEL}>\r\n                <PanelHeader\r\n                    left={\r\n                        <div className=\"ViewListQuizes__header-left\">\r\n                            <Icon24Back onClick={onBack} fill=\"white\" />\r\n                            <h1 className=\"ViewListQuizes__title\">{title}</h1>\r\n                        </div>\r\n                    }\r\n                    className=\"ViewListQuizes__header\"\r\n                    visor={true}\r\n                    transparent={true}\r\n                    separator={false}\r\n                >\r\n                </PanelHeader>\r\n\r\n                <div className=\"ViewListQuizes\">\r\n                    <ListQuizes\r\n                        quizes={quizes}\r\n                        createOnClickItemQuizes={createOnClickItemQuizes}\r\n                    />\r\n                </div>\r\n            </Panel>\r\n        </View>\r\n    );\r\n}\r\n\r\nexport default ViewListQuizes;\r\n","import React from 'react';\r\n\r\nexport const colorsArrow = {\r\n    GREEN: \"GREEN\",\r\n    RED: \"RED\",\r\n    GREY: \"GREY\"\r\n}\r\n\r\nexport const directionArrow = {\r\n    UP: \"UP\",\r\n    DOWN: \"DOWN\"\r\n}\r\n\r\nconst Arrow = ({direction, typeColor}) => {\r\n    const getColor = (typeColor) => {\r\n        if (typeColor === colorsArrow.GREEN) {\r\n            return \"#79C52D\";\r\n        }\r\n\r\n        if (typeColor === colorsArrow.RED) {\r\n            return \"#E81919\";\r\n        }\r\n\r\n        return \"#858585\";\r\n    }\r\n\r\n    const styleSVG = {\r\n        transform: `rotate(${direction === directionArrow.UP ?\"-180deg\" :\"0deg\"})`,\r\n        transition: \"transform 1s\"\r\n    }\r\n\r\n    const stylePath = {\r\n        transition: \"fill 1s\"\r\n    }\r\n\r\n    return (\r\n        <svg style={styleSVG} width=\"26\" height=\"26\" viewBox=\"0 0 26 26\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <circle cx=\"13\" cy=\"13\" r=\"13\" fill=\"#303030\" />\r\n            <path style={stylePath} fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M6.59278 10.8248C7.0137 10.2776 7.7985 10.1753 8.3457 10.5962L13.0002 14.1766L17.6548 10.5962C18.2019 10.1753 18.9868 10.2776 19.4077 10.8248C19.8286 11.372 19.7262 12.1568 19.179 12.5778L13.7624 16.7444C13.313 17.09 12.6874 17.09 12.2381 16.7444L6.82142 12.5778C6.27423 12.1568 6.17186 11.372 6.59278 10.8248Z\" fill={getColor(typeColor)} />\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default Arrow;\r\n","import React, { createRef, useEffect, useState } from 'react';\r\nimport animate from '../../../anime/animate';\r\nimport easeOut from '../../../anime/easeOut';\r\nimport BlackBackground from '../../../components/BlackBackground/BlackBackground';\r\nimport Arrow, { colorsArrow, directionArrow } from './Arrow';\r\n\r\nimport \"./ItemAnswerQuestion.css\";\r\n\r\nconst ItemAnswerQuestion = ({ id, question, indexRightAnswer, indexUserAnswer, isGrey, setIsAllGrey }) => {\r\n    const [isFirstRender, setIsFirstRender] = useState(true);\r\n\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [typeColor, setTypeColor] = useState(indexRightAnswer === indexUserAnswer ?colorsArrow.GREEN :colorsArrow.RED);\r\n\r\n    const [isDisabledClick, setIsDisabledClick] = useState(false);\r\n\r\n\r\n    // работа с текстом вопроса\r\n    const MAX_LENGTH_QUESTION_TEXT = 15;\r\n\r\n    const cutQuestionText = (text, length=MAX_LENGTH_QUESTION_TEXT) => text.substring(0, length) + \"...\";\r\n\r\n    const [questionText, setQuestionText] = useState(question.questionText.substring(0, MAX_LENGTH_QUESTION_TEXT) + \"...\");\r\n\r\n    useEffect(() => {\r\n        if (isFirstRender) {\r\n            return;\r\n        }\r\n\r\n        setIsDisabledClick(true);\r\n\r\n        if (isOpen) {\r\n            animate({\r\n                timing: easeOut,\r\n                duration: 1000,\r\n                draw(progress) {\r\n                    if (progress < 1) {\r\n                        const length = MAX_LENGTH_QUESTION_TEXT + \r\n                            Math.floor((question.questionText.length - MAX_LENGTH_QUESTION_TEXT) * progress);\r\n                        setQuestionText(question.questionText.substring(0, length));\r\n                    } else {\r\n                        setQuestionText(question.questionText);\r\n                        setIsDisabledClick(false);\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            animate({\r\n                timing: easeOut,\r\n                duration: 1000,\r\n                draw(progress) {\r\n                    if (progress < 1) {\r\n                        const length = MAX_LENGTH_QUESTION_TEXT + \r\n                            Math.floor((question.questionText.length - MAX_LENGTH_QUESTION_TEXT) * (1 - progress));\r\n                        setQuestionText(question.questionText.substring(0, length));\r\n                    } else {\r\n                        setQuestionText(question.questionText.substring(0, MAX_LENGTH_QUESTION_TEXT) + \"...\");\r\n                        setIsDisabledClick(false);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }, [isOpen]);\r\n\r\n    const onClick = () => {\r\n        setIsOpen(!isOpen);\r\n        setIsAllGrey(!isGrey);\r\n    }\r\n\r\n    const getAnswerText = (index) => {\r\n        return `${question.answerOptions[index].text}`;\r\n    }\r\n\r\n\r\n    const [heightWrapContent, setHeightWrapContent] = useState(\"auto\");\r\n\r\n    const refWrapContent = createRef();\r\n\r\n    useEffect(() => {\r\n        setIsFirstRender(false);\r\n        setHeightWrapContent(refWrapContent.current.offsetHeight)\r\n    }, []);\r\n\r\n    const PADDING_ITEM_ANSWER_QUESTION = 16;\r\n\r\n    const getStyleWrapAnswers = (isFirstRender, isOpen) => {\r\n        if (isFirstRender) {\r\n            return {\r\n                position: \"absolute\",\r\n                visibility: \"hidden\",\r\n                width: \"100%\",\r\n                padding: `0 ${PADDING_ITEM_ANSWER_QUESTION}px`,\r\n                boxSizing: \"border-box\"\r\n            }\r\n        }\r\n\r\n        return {\r\n            height: isOpen ? heightWrapContent : 0\r\n        }\r\n    }\r\n\r\n    const styleWrapAnswers = getStyleWrapAnswers(isFirstRender, isOpen);\r\n\r\n    const styleItemAnswerQuestion = {\r\n        padding: `0 ${PADDING_ITEM_ANSWER_QUESTION}px`,\r\n        zIndex: isOpen ?10 :0\r\n    }\r\n\r\n    // логика закрытия по щелчку вне ItemAnswerQuestion\r\n    const handlerClickWithouItemAnswerQuestion = (e) => {\r\n        if (!e.target.closest(`.${id}`)) {\r\n            setIsOpen(false);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isOpen) {\r\n            window.addEventListener(\"click\", handlerClickWithouItemAnswerQuestion);\r\n        } else {\r\n            window.removeEventListener(\"click\", handlerClickWithouItemAnswerQuestion);\r\n        }\r\n\r\n        return () => {\r\n            window.removeEventListener(\"click\", handlerClickWithouItemAnswerQuestion);\r\n        }\r\n    }, [isOpen]);\r\n\r\n    return (\r\n        <>\r\n            {isOpen && <BlackBackground />}\r\n\r\n            <div style={styleItemAnswerQuestion} className=\"ItemAnswerQuestion\" id={id}>\r\n                <div\r\n                    onClick={!isDisabledClick && onClick}\r\n                    className=\"ItemAnswerQuestion__question-wrap\"\r\n                >\r\n                    <p className=\"ItemAnswerQuestion__question-text\">\r\n                        {questionText}\r\n                    </p>\r\n\r\n                    <span className=\"ItemAnswerQuestion__arrow\">\r\n                        <Arrow\r\n                            direction={isOpen ?directionArrow.UP :directionArrow.DOWN}\r\n                            typeColor={isGrey ?colorsArrow.GREY :typeColor}\r\n                        />\r\n                    </span>\r\n                </div>\r\n\r\n                <div ref={refWrapContent} style={styleWrapAnswers} className=\"ItemAnswerQuestion__wrap-answers\">\r\n                    {\r\n                        indexUserAnswer !== indexRightAnswer &&\r\n                        <div className=\"ItemAnswerQuestion__answer\">\r\n                            <div className=\"ItemAnswerQuestion__title-answer-wrap ItemAnswerQuestion__title-answer-wrap_bad\">\r\n                                <h2\r\n                                    className=\"ItemAnswerQuestion__title-answer ItemAnswerQuestion__title-answer_bad\"\r\n                                >Ваш ответ</h2>\r\n                            </div>\r\n\r\n                            <p className=\"ItemAnswerQuestion__text-answer\">\r\n                                {getAnswerText(indexUserAnswer)}\r\n                            </p>\r\n                        </div>\r\n                    }\r\n\r\n                    <div className=\"ItemAnswerQuestion__answer\">\r\n                        <div className=\"ItemAnswerQuestion__title-answer-wrap ItemAnswerQuestion__title-answer-wrap_good\">\r\n                            <h2\r\n                                className=\"ItemAnswerQuestion__title-answer ItemAnswerQuestion__title-answer_good\"\r\n                            >\r\n                                {\r\n                                    indexUserAnswer === indexRightAnswer\r\n                                        ? \"Ваш ответ верен\"\r\n                                        : \"Правильный ответ\"\r\n                                }\r\n                            </h2>\r\n                        </div>\r\n\r\n                        <p className=\"ItemAnswerQuestion__text-answer\">\r\n                            {getAnswerText(indexRightAnswer)}\r\n                        </p>\r\n                    </div>\r\n\r\n                    <div className=\"ItemAnswerQuestion__answer\">\r\n                        <div className=\"ItemAnswerQuestion__title-answer-wrap ItemAnswerQuestion__title-answer-wrap_normal\">\r\n                            <h2\r\n                                className=\"ItemAnswerQuestion__title-answer ItemAnswerQuestion__title-answer_normal\"\r\n                            >Остальные варианты</h2>\r\n                        </div>\r\n\r\n                        {\r\n                            question.answerOptions.map((answer, i) => {\r\n                                if (i === indexRightAnswer || i === indexUserAnswer) {\r\n                                    return null;\r\n                                }\r\n\r\n                                return (\r\n                                    <p key={i} className=\"ItemAnswerQuestion__text-answer\">\r\n                                        {answer.text}\r\n                                    </p>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ItemAnswerQuestion;\r\n","import { Icon24Back } from '@vkontakte/icons';\r\nimport { Panel, PanelHeader, PanelHeaderButton, View } from '@vkontakte/vkui';\r\nimport React, { useState } from 'react';\r\n\r\nimport \"./AnswersQuestions.css\";\r\nimport ItemAnswerQuestion from './ItemAnswerQuestion/ItemAnswerQuestion';\r\n\r\nconst AnswersQuestions = ({id, questions, indexesAnswers, onBack=()=>{}}) => {\r\n    const [isAllGrey, setIsAllGrey] = useState(false);\r\n\r\n    return (\r\n        <View id={id} activePanel=\"PANEL_ANSWERS_QUESTIONS\">\r\n            <Panel id=\"PANEL_ANSWERS_QUESTIONS\">\r\n                <PanelHeader\r\n                    left={\r\n                        <>\r\n                            <PanelHeaderButton onClick={onBack}>\r\n                                <Icon24Back fill=\"white\" />\r\n                            </PanelHeaderButton>\r\n                            <h1 className=\"AnswersQuestions__title\">Вопросы</h1>\r\n                        </>\r\n                    }\r\n                    className=\"AnswersQuestions__PanelHeader\"\r\n                    separator={false}\r\n                    transparent={false}\r\n                    visor={false}\r\n                ></PanelHeader>\r\n\r\n                <div className=\"AnswersQuestions\">\r\n                    {\r\n                        questions.map((q, i) => (\r\n                            <ItemAnswerQuestion\r\n                                id={`ItemAnswerQuestion-${i}`}\r\n                                key={i}\r\n                                question={q}\r\n                                indexRightAnswer={questions[i].answerOptions.findIndex(a => a.score === 1)}\r\n                                indexUserAnswer={indexesAnswers[i]}\r\n                                isGrey={isAllGrey}\r\n                                setIsAllGrey={setIsAllGrey}\r\n                            />\r\n                        ))\r\n                    }\r\n                </div>\r\n            </Panel>\r\n        </View>\r\n    )\r\n}\r\n\r\nexport default AnswersQuestions;\r\n","import React, { useState, useEffect } from 'react';\r\nimport bridge from '@vkontakte/vk-bridge';\r\nimport ScreenSpinner from '@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner';\r\nimport '@vkontakte/vkui/dist/vkui.css';\r\n\r\nimport { AdaptivityProvider, Appearance, AppRoot, ConfigProvider, Group, Header, Panel, PanelHeader, Platform, Root, Scheme, SimpleCell, SplitCol, SplitLayout, View } from '@vkontakte/vkui';\r\n\r\nimport \"./App.css\";\r\nimport StartWindow from './panels/StartWindow/StartWindow';\r\nimport ListAge from './panels/ListAge/ListAge';\r\nimport ListQuestions from './panels/ListQuestions/ListQuestions';\r\nimport Result from './panels/Result/Result';\r\nimport ViewListQuizes from './panels/ViewListQuizes/ViewListQuizes';\r\nimport AnswersQuestions from './panels/AnswersQuestions/AnswersQuestions';\r\nimport Modal from './panels/ListQuestions/IteamListQuestion/Modal/Modal';\r\n\r\nconst App = ({ eras, results, MAX_SCORE, \r\n\tsavePercentQuiz = (indexAge, indexQuiz, percentProgress) => {}}) => {\r\n\r\n\tuseEffect(() => {\r\n\t\t//Стилизуем компоненты интерфейса клиента\r\n\t\tbridge\r\n\t\t\t.send(\"VKWebAppGetClientVersion\")\r\n\t\t\t.then(data => {\r\n\t\t\t\tif(data.platform === Platform.IOS){\r\n\t\t\t\t\tbridge.send(\"VKWebAppSetViewSettings\", {\"status_bar_style\": \"light\"});\r\n\t\t\t\t}\r\n\t\t\t\telse if (data.platform === Platform.ANDROID){\r\n\t\t\t\t\tbridge.send(\"VKWebAppSetViewSettings\", {\"status_bar_style\": \"light\", \"action_bar_color\": \"#000\",\"navigation_bar_color\":\"#000000\"});\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch(error =>{\r\n\t\t\t\tconsole.log(error)\r\n\t\t\t})\r\n\t\t\r\n\t\t//Обновляем текущую ширину\r\n\t\tsetCurWidth(document.getElementById('root').scrollWidth)\r\n\t}, []);\r\n\r\n\t// логика переключения между View\r\n\tconst VIEW_ID_START_WINDOW = \"VIEW_ID_START_WINDOW\";\r\n\tconst VIEW_ID_LIST_AGE = \"VIEW_ID_LIST_AGE\";\r\n\tconst VIEW_ID_LIST_QUIZES = \"VIEW_ID_LIST_QUIZES\";\r\n\tconst VIEW_ID_LIST_QUESTIONES = \"VIEW_ID_LIST_QUESTIONES\";\r\n\tconst VIEW_ID_RESULT = \"VIEW_ID_RESULT\";\r\n\tconst VIEW_ID_ANSWERS_QUESTIONS = \"VIEW_ID_ANSWERS_QUESTIONS\";\r\n\r\n\t\r\n\tconst TEST = \"TEST\";\r\n\r\n\tconst [activeView, setActiveView] = useState(VIEW_ID_START_WINDOW);\r\n\tconst [curWidth, setCurWidth] = useState(0)\r\n\r\n\tconst goToViewStartWindow = () => setActiveView(VIEW_ID_START_WINDOW);\r\n\tconst goToViewListAge = () => setActiveView(VIEW_ID_LIST_AGE);\r\n\tconst goToViewListQuizes = () => setActiveView(VIEW_ID_LIST_QUIZES);\r\n\tconst goToViewListQuestions = () => setActiveView(VIEW_ID_LIST_QUESTIONES);\r\n\tconst goToViewResult = () => setActiveView(VIEW_ID_RESULT);\r\n\tconst goToViewAnswersQuestions = () => setActiveView(VIEW_ID_ANSWERS_QUESTIONS);\r\n\r\n\t// логика хранения индексов\r\n\tconst [indexAge, setIndexAge] = useState(0);\r\n\tconst [indexQuiz, setIndexQuiz] = useState(0);\r\n\tconst [indexResuslt, setIndexResult] = useState(0);\r\n\r\n\t// логика хранения ответов\r\n\tconst [indexesAnswers, setIndexesAnswers] = useState([]);\r\n\r\n\t// первый раз открываем Result\r\n\tconst [isFirstOpenResult, setIsFirstOpenResult] = useState(true);\r\n\r\n\t// функции для StartWindowY\r\n\tconst onClickStartWindow = () => {\r\n\t\tgoToViewListAge();\r\n\t}\r\n\r\n\t// функции для ListAge\r\n\tconst createOnClickItemAge = (index) => () => {\r\n\t\tsetIndexAge(index);\r\n\t\tgoToViewListQuizes();\r\n\t}\r\n\r\n\t// функции для ListQuizes\r\n\tconst onBackListQuizes = () => {\r\n\t\tsetIsFirstOpenResult(true);\r\n\t\tgoToViewListAge();\r\n\t}\r\n\r\n\tconst createOnClickItemQuizes = (index) => () => {\r\n\t\tsetIndexQuiz(index);\r\n\t\tgoToViewListQuestions();\r\n\t}\r\n\r\n\t// функции для ListQuestions\r\n\tconst onBackListQuestions = () => {\r\n\t\tgoToViewListQuizes();\r\n\t}\r\n\r\n\tconst onFinishListQuestions = (totalScore, indexesAnswers) => {\r\n\t\tsetIndexesAnswers(indexesAnswers);\r\n\r\n\t\tconst percent = Math.round(totalScore / MAX_SCORE * 100);\r\n\t\tsavePercentQuiz(indexAge, indexQuiz, percent);\r\n\t\tsetIndexResult(results.findIndex(res => res.percent === percent));\r\n\t\tgoToViewResult();\r\n\t}\r\n\r\n\t// функции для Result\r\n\tconst onBackResult = () => {\r\n\t\tgoToViewListQuizes();\r\n\t}\r\n\r\n\tconst onAgainResult = () => {\r\n\t\tgoToViewListQuestions();\r\n\t}\r\n\t\r\n\tconst onGoToAnswersQuestionResult = () => {\r\n\t\tgoToViewAnswersQuestions()\r\n\t}\r\n\r\n\t// функции для AnswersQuestions\r\n\tconst onBackAnswersQuestions = () => {\r\n\t\tgoToViewResult();\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t<ConfigProvider>\r\n\t\t<AdaptivityProvider>\r\n\t\t\t<AppRoot>\r\n\t\t\t\t<SplitLayout header={null}>\r\n\t\t\t\t\t<SplitCol >\r\n\t\t\t\t\t\t<Root activeView={activeView}>\r\n\t\t\t\t\t\t\t<StartWindow \r\n\t\t\t\t\t\t\t\tid={VIEW_ID_START_WINDOW} \r\n\t\t\t\t\t\t\t\tonClick={onClickStartWindow}\r\n\t\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t\t<ListAge \r\n\t\t\t\t\t\t\t\tid={VIEW_ID_LIST_AGE} \r\n\t\t\t\t\t\t\t\teras={eras} \r\n\t\t\t\t\t\t\t\tcurWidth={curWidth}\r\n\t\t\t\t\t\t\t\tcreateOnClickItemAge={createOnClickItemAge}\r\n\t\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t\t<ViewListQuizes \r\n\t\t\t\t\t\t\t\tid={VIEW_ID_LIST_QUIZES} \r\n\t\t\t\t\t\t\t\ttitle={eras[indexAge].shortTitle} \r\n\t\t\t\t\t\t\t\tquizes={eras[indexAge].quizzes} \r\n\t\t\t\t\t\t\t\tonBack={onBackListQuizes} \r\n\t\t\t\t\t\t\t\tcreateOnClickItemQuizes={createOnClickItemQuizes}\r\n\t\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t\t<ListQuestions \r\n\t\t\t\t\t\t\t\tid={VIEW_ID_LIST_QUESTIONES}\r\n\t\t\t\t\t\t\t\tarrQuestions={eras[indexAge].quizzes[indexQuiz].questions}\r\n\t\t\t\t\t\t\t\tonBack={onBackListQuestions}\r\n\t\t\t\t\t\t\t\tonFinish={onFinishListQuestions}\r\n\t\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t\t<Result\r\n\t\t\t\t\t\t\t\tid={VIEW_ID_RESULT}\r\n\t\t\t\t\t\t\t\tpercent={results[indexResuslt].percent}\r\n\t\t\t\t\t\t\t\tyear={results[indexResuslt].year}\r\n\t\t\t\t\t\t\t\thistoricalEvent={results[indexResuslt].historicalEvent}\r\n\t\t\t\t\t\t\t\tquizes={eras[indexAge].quizzes.filter(quiz => quiz.percentProgress !== 100)}\r\n\t\t\t\t\t\t\t\tonBack={onBackResult}\r\n\t\t\t\t\t\t\t\tcreateOnClickItemQuizes={createOnClickItemQuizes}\r\n\t\t\t\t\t\t\t\tonAgain={onAgainResult}\r\n\t\t\t\t\t\t\t\tonGoToAnswersQuestion={onGoToAnswersQuestionResult}\r\n\t\t\t\t\t\t\t\tisFirstOpenResult={isFirstOpenResult}\r\n\t\t\t\t\t\t\t\tsetIsFirstOpenResult={setIsFirstOpenResult}\r\n\t\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t\t<AnswersQuestions\r\n\t\t\t\t\t\t\t\tid={VIEW_ID_ANSWERS_QUESTIONS}\r\n\t\t\t\t\t\t\t\tquestions={eras[indexAge].quizzes[indexQuiz].questions}\r\n\t\t\t\t\t\t\t\tindexesAnswers={indexesAnswers}\r\n\t\t\t\t\t\t\t\tonBack={onBackAnswersQuestions}\r\n\t\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t\t{/* <View activePanel=\"main\" id={TEST}>\r\n\t\t\t\t\t\t\t\t\t\t<Panel id=\"main\">\r\n\t\t\t\t\t\t\t\t\t\t<PanelHeader>VKUI</PanelHeader>\r\n\t\t\t\t\t\t\t\t\t\t<Group header={<Header mode=\"secondary\">Items</Header>}>\r\n\t\t\t\t\t\t\t\t\t\t\t<SimpleCell>Hello</SimpleCell>\r\n\t\t\t\t\t\t\t\t\t\t\t<SimpleCell>World</SimpleCell>\r\n\t\t\t\t\t\t\t\t\t\t</Group>\r\n\t\t\t\t\t\t\t\t\t\t</Panel>\r\n\t\t\t\t\t\t\t\t\t</View> */}\r\n\r\n\t\t\t\t\t\t\t{/* <Modal\r\n\t\t\t\t\t\t\t\tid={MODAL_TEST}\r\n\t\t\t\t\t\t\t\tidInside={activeModal}\r\n\t\t\t\t\t\t\t/> */}\r\n\t\t\t\t\t\t</Root>\r\n\t\t\t\t\t</SplitCol>\r\n\t\t\t\t</SplitLayout>\r\n\t\t\t</AppRoot>\r\n    \t</AdaptivityProvider>\r\n    </ConfigProvider>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import imagePetr1 from \"../../img/ageRussianEmpire/quizPetr1/petr.png\";\r\n\r\nimport imgExample from \"../../img/ageRussianEmpire/quizPetr1/Картинка.png\";\r\n\r\nconst quizPetr1 = {\r\n    title: \"Император Пётр I\",\r\n    imageSrc: imagePetr1,\r\n    questions: [\r\n        {\r\n            questionImg: imgExample,\r\n            overSideImg: imgExample,\r\n            questionText: \"Основная причина дефолта 98-го года?\",\r\n            answerOptions: [\r\n                {\r\n                    text: \"Лопнул пузырь ГКО (Государственные краткосрочные облигации)\",\r\n                    score: 1\r\n                },\r\n                {\r\n                    text: \"Отказ западных партнёров выдать кредит\",\r\n                    score: 0\r\n                },\r\n                {\r\n                    text: \"Решение о срочном запуске печатного станка в “ускоренном режиме\",\r\n                    score: 0\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            questionImg: imgExample,\r\n            overSideImg: null,\r\n            questionText: \"Вопрос 2\",\r\n            answerOptions: [\r\n                {\r\n                    text: \"1\",\r\n                    score: 0\r\n                },\r\n                {\r\n                    text: \"2\",\r\n                    score: 1\r\n                },\r\n                {\r\n                    text: \"3\",\r\n                    score: 0\r\n                }\r\n            ],\r\n        },\r\n        {\r\n            questionImg: imgExample,\r\n            overSideImg: null,\r\n            questionText: \"Вопрос 3\",\r\n            answerOptions: [\r\n                {\r\n                    text: \"1\",\r\n                    score: 1\r\n                },\r\n                {\r\n                    text: \"2\",\r\n                    score: 0\r\n                },\r\n                {\r\n                    text: \"3\",\r\n                    score: 0\r\n                }\r\n            ],\r\n        },\r\n        {\r\n            questionImg: imgExample,\r\n            overSideImg: null,\r\n            questionText: \"Вопрос 4\",\r\n            answerOptions: [\r\n                {\r\n                    text: \"1\",\r\n                    score: 1\r\n                },\r\n                {\r\n                    text: \"2\",\r\n                    score: 0\r\n                },\r\n                {\r\n                    text: \"3\",\r\n                    score: 0\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}\r\n\r\nexport default quizPetr1;\r\n","import imageTheEraOfPalaceCoups from \"../../img/ageRussianEmpire/The era of palace coups/The era of palace coups.png\";\r\n\r\nconst quizTheEraOfPalaceCoups = {\r\n    title: \"Эпоха Дворцовых переворотов\",\r\n    imageSrc: imageTheEraOfPalaceCoups,\r\n    questions: []\r\n}\r\n\r\nexport default quizTheEraOfPalaceCoups;\r\n","import mainImage from \"../../img/ageRussianEmpire/main.png\";\r\nimport quizPetr1 from \"./quizPetr1\";\r\nimport quizTheEraOfPalaceCoups from \"./quizTheEraOfPalaceCoups\";\r\n\r\nconst ageRussianEmpire = {\r\n    title: \"Российская империя\",\r\n    shortTitle: \"Рос. империя\",\r\n    imageSrc: mainImage,\r\n    description:\"Росси́йская импе́рия (рус. дореф. Россійская имперія; также Всеросси́йская импе́рия, ца́рская Росси́я) — государство, существовавшее в период с 22 октября (2 ноября) 1721 года до Февральской революции и провозглашения республики в сентябре 1917 года Временным правительством.\",\r\n    percentProgress: 0,\r\n    quizzes: [\r\n        quizPetr1,\r\n        quizTheEraOfPalaceCoups\r\n    ]\r\n}\r\n\r\nexport default ageRussianEmpire;\r\n","import ageRussianEmpire from \"./ageRussianEmpire/ageRussianEmpire\";\r\n\r\nimport results from \"./results/results\";\r\n\r\nconst store = {\r\n    eras: [\r\n        ageRussianEmpire,\r\n        ageRussianEmpire,\r\n        ageRussianEmpire,\r\n        ageRussianEmpire,\r\n        ageRussianEmpire\r\n    ],\r\n\r\n    results,\r\n\r\n    MAX_SCORE: 8\r\n}\r\n\r\nexport default store;\r\n\r\nconst calculatePercentAge = (era) => {\r\n    const numberOfPassedQuizes = era.quizzes.reduce((sum, quiz) => {\r\n        return quiz.percentProgress !== undefined ?sum + 1 :sum\r\n    }, 0);\r\n\r\n    return Math.round(numberOfPassedQuizes / era.length * 100);\r\n}\r\n\r\nexport const savePercentQuiz = (indexAge, indexQuiz, percentProgress) => {\r\n    store.eras = store.eras.map((era, i) => {\r\n        if (i !== indexAge) {\r\n            return era;\r\n        }\r\n\r\n        if (era.quizzes[indexQuiz].percentProgress === undefined) {\r\n            era.quizzes[indexQuiz].percentProgress = percentProgress;\r\n        } else {\r\n            era.quizzes[indexQuiz].percentProgress = Math.max(percentProgress, era.quizzes[indexQuiz].percentProgress);\r\n        }\r\n\r\n        era.percentProgress = calculatePercentAge(era);\r\n\r\n        return {...era};\r\n    })\r\n}\r\n","const results = [\r\n    {\r\n        percent: 0,\r\n        year: \"1700\",\r\n        historicalEvent: \"Начало Северной войны со Швецией\"\r\n    },\r\n    {\r\n        percent: 13,\r\n        year: \"1013\",\r\n        historicalEvent: \"Какое-то событие\"\r\n    },\r\n    {\r\n        percent: 25,\r\n        year: \"1025\",\r\n        historicalEvent: \"Какое-то событие\"\r\n    },\r\n    {\r\n        percent: 38,\r\n        year: \"1038\",\r\n        historicalEvent: \"Какое-то событие\"\r\n    },\r\n    {\r\n        percent: 50,\r\n        year: \"1050\",\r\n        historicalEvent: \"Какое-то событие\"\r\n    },\r\n    {\r\n        percent: 63,\r\n        year: \"1063\",\r\n        historicalEvent: \"Какое-то событие\"\r\n    },\r\n    {\r\n        percent: 75,\r\n        year: \"1075\",\r\n        historicalEvent: \"Какое-то событие\"\r\n    },\r\n    {\r\n        percent: 88,\r\n        year: \"1088\",\r\n        historicalEvent: \"Какое-то событие\"\r\n    },\r\n    {\r\n        percent: 100,\r\n        year: \"1100\",\r\n        historicalEvent: \"в Витичеве прошёл 2-й съезд князей Киевской Рус\"\r\n    }\r\n]\r\n\r\nexport default results;\r\n","import \"core-js/features/map\";\r\nimport \"core-js/features/set\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport bridge from \"@vkontakte/vk-bridge\";\r\nimport App from \"./App\";\r\n\r\nimport store, { savePercentQuiz } from \"./store/store.js\";\r\n\r\n// Init VK  Mini App\r\nbridge.send(\"VKWebAppInit\");\r\n\r\nReactDOM.render(\r\n    <App {...store} savePercentQuiz={savePercentQuiz}/>, \r\n    document.getElementById(\"root\")\r\n);\r\n\r\nimport(\"./eruda\").then(({ default: eruda }) => {}); //runtime download\r\n\r\n","module.exports = __webpack_public_path__ + \"static/media/Картинка.f17bd5e3.png\";","module.exports = __webpack_public_path__ + \"static/media/petr.58cb079c.png\";","module.exports = __webpack_public_path__ + \"static/media/contacts.da748c82.svg\";"],"sourceRoot":""}